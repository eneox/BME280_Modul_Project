
ADXL345_Modul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f0c  08004f0c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f14  08004f14  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000004b0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000800d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a9  00000000  00000000  000280b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00029760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000718  00000000  00000000  00029f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020444  00000000  00000000  0002a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2eb  00000000  00000000  0004aa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1eff  00000000  00000000  00054d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116c6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002410  00000000  00000000  00116cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800412c 	.word	0x0800412c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800412c 	.word	0x0800412c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b974 	b.w	8000bdc <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468e      	mov	lr, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d14d      	bne.n	80009b6 <__udivmoddi4+0xaa>
 800091a:	428a      	cmp	r2, r1
 800091c:	4694      	mov	ip, r2
 800091e:	d969      	bls.n	80009f4 <__udivmoddi4+0xe8>
 8000920:	fab2 f282 	clz	r2, r2
 8000924:	b152      	cbz	r2, 800093c <__udivmoddi4+0x30>
 8000926:	fa01 f302 	lsl.w	r3, r1, r2
 800092a:	f1c2 0120 	rsb	r1, r2, #32
 800092e:	fa20 f101 	lsr.w	r1, r0, r1
 8000932:	fa0c fc02 	lsl.w	ip, ip, r2
 8000936:	ea41 0e03 	orr.w	lr, r1, r3
 800093a:	4094      	lsls	r4, r2
 800093c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000940:	0c21      	lsrs	r1, r4, #16
 8000942:	fbbe f6f8 	udiv	r6, lr, r8
 8000946:	fa1f f78c 	uxth.w	r7, ip
 800094a:	fb08 e316 	mls	r3, r8, r6, lr
 800094e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000952:	fb06 f107 	mul.w	r1, r6, r7
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000962:	f080 811f 	bcs.w	8000ba4 <__udivmoddi4+0x298>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 811c 	bls.w	8000ba4 <__udivmoddi4+0x298>
 800096c:	3e02      	subs	r6, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a5b      	subs	r3, r3, r1
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb3 f0f8 	udiv	r0, r3, r8
 8000978:	fb08 3310 	mls	r3, r8, r0, r3
 800097c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000980:	fb00 f707 	mul.w	r7, r0, r7
 8000984:	42a7      	cmp	r7, r4
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x92>
 8000988:	eb1c 0404 	adds.w	r4, ip, r4
 800098c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000990:	f080 810a 	bcs.w	8000ba8 <__udivmoddi4+0x29c>
 8000994:	42a7      	cmp	r7, r4
 8000996:	f240 8107 	bls.w	8000ba8 <__udivmoddi4+0x29c>
 800099a:	4464      	add	r4, ip
 800099c:	3802      	subs	r0, #2
 800099e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009a2:	1be4      	subs	r4, r4, r7
 80009a4:	2600      	movs	r6, #0
 80009a6:	b11d      	cbz	r5, 80009b0 <__udivmoddi4+0xa4>
 80009a8:	40d4      	lsrs	r4, r2
 80009aa:	2300      	movs	r3, #0
 80009ac:	e9c5 4300 	strd	r4, r3, [r5]
 80009b0:	4631      	mov	r1, r6
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d909      	bls.n	80009ce <__udivmoddi4+0xc2>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	f000 80ef 	beq.w	8000b9e <__udivmoddi4+0x292>
 80009c0:	2600      	movs	r6, #0
 80009c2:	e9c5 0100 	strd	r0, r1, [r5]
 80009c6:	4630      	mov	r0, r6
 80009c8:	4631      	mov	r1, r6
 80009ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ce:	fab3 f683 	clz	r6, r3
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d14a      	bne.n	8000a6c <__udivmoddi4+0x160>
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d302      	bcc.n	80009e0 <__udivmoddi4+0xd4>
 80009da:	4282      	cmp	r2, r0
 80009dc:	f200 80f9 	bhi.w	8000bd2 <__udivmoddi4+0x2c6>
 80009e0:	1a84      	subs	r4, r0, r2
 80009e2:	eb61 0303 	sbc.w	r3, r1, r3
 80009e6:	2001      	movs	r0, #1
 80009e8:	469e      	mov	lr, r3
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d0e0      	beq.n	80009b0 <__udivmoddi4+0xa4>
 80009ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80009f2:	e7dd      	b.n	80009b0 <__udivmoddi4+0xa4>
 80009f4:	b902      	cbnz	r2, 80009f8 <__udivmoddi4+0xec>
 80009f6:	deff      	udf	#255	; 0xff
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	f040 8092 	bne.w	8000b26 <__udivmoddi4+0x21a>
 8000a02:	eba1 010c 	sub.w	r1, r1, ip
 8000a06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a0a:	fa1f fe8c 	uxth.w	lr, ip
 8000a0e:	2601      	movs	r6, #1
 8000a10:	0c20      	lsrs	r0, r4, #16
 8000a12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a16:	fb07 1113 	mls	r1, r7, r3, r1
 8000a1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a1e:	fb0e f003 	mul.w	r0, lr, r3
 8000a22:	4288      	cmp	r0, r1
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x12c>
 8000a26:	eb1c 0101 	adds.w	r1, ip, r1
 8000a2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x12a>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f200 80cb 	bhi.w	8000bcc <__udivmoddi4+0x2c0>
 8000a36:	4643      	mov	r3, r8
 8000a38:	1a09      	subs	r1, r1, r0
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a40:	fb07 1110 	mls	r1, r7, r0, r1
 8000a44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a48:	fb0e fe00 	mul.w	lr, lr, r0
 8000a4c:	45a6      	cmp	lr, r4
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x156>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a58:	d202      	bcs.n	8000a60 <__udivmoddi4+0x154>
 8000a5a:	45a6      	cmp	lr, r4
 8000a5c:	f200 80bb 	bhi.w	8000bd6 <__udivmoddi4+0x2ca>
 8000a60:	4608      	mov	r0, r1
 8000a62:	eba4 040e 	sub.w	r4, r4, lr
 8000a66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a6a:	e79c      	b.n	80009a6 <__udivmoddi4+0x9a>
 8000a6c:	f1c6 0720 	rsb	r7, r6, #32
 8000a70:	40b3      	lsls	r3, r6
 8000a72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a82:	431c      	orrs	r4, r3
 8000a84:	40f9      	lsrs	r1, r7
 8000a86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a92:	0c20      	lsrs	r0, r4, #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fb09 1118 	mls	r1, r9, r8, r1
 8000a9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aa0:	fb08 f00e 	mul.w	r0, r8, lr
 8000aa4:	4288      	cmp	r0, r1
 8000aa6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aaa:	d90b      	bls.n	8000ac4 <__udivmoddi4+0x1b8>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ab4:	f080 8088 	bcs.w	8000bc8 <__udivmoddi4+0x2bc>
 8000ab8:	4288      	cmp	r0, r1
 8000aba:	f240 8085 	bls.w	8000bc8 <__udivmoddi4+0x2bc>
 8000abe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ac2:	4461      	add	r1, ip
 8000ac4:	1a09      	subs	r1, r1, r0
 8000ac6:	b2a4      	uxth	r4, r4
 8000ac8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000acc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ad0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ad4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ad8:	458e      	cmp	lr, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x1e2>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ae4:	d26c      	bcs.n	8000bc0 <__udivmoddi4+0x2b4>
 8000ae6:	458e      	cmp	lr, r1
 8000ae8:	d96a      	bls.n	8000bc0 <__udivmoddi4+0x2b4>
 8000aea:	3802      	subs	r0, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000af2:	fba0 9402 	umull	r9, r4, r0, r2
 8000af6:	eba1 010e 	sub.w	r1, r1, lr
 8000afa:	42a1      	cmp	r1, r4
 8000afc:	46c8      	mov	r8, r9
 8000afe:	46a6      	mov	lr, r4
 8000b00:	d356      	bcc.n	8000bb0 <__udivmoddi4+0x2a4>
 8000b02:	d053      	beq.n	8000bac <__udivmoddi4+0x2a0>
 8000b04:	b15d      	cbz	r5, 8000b1e <__udivmoddi4+0x212>
 8000b06:	ebb3 0208 	subs.w	r2, r3, r8
 8000b0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b12:	fa22 f306 	lsr.w	r3, r2, r6
 8000b16:	40f1      	lsrs	r1, r6
 8000b18:	431f      	orrs	r7, r3
 8000b1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b1e:	2600      	movs	r6, #0
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	f1c2 0320 	rsb	r3, r2, #32
 8000b2a:	40d8      	lsrs	r0, r3
 8000b2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b30:	fa21 f303 	lsr.w	r3, r1, r3
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4301      	orrs	r1, r0
 8000b38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3c:	fa1f fe8c 	uxth.w	lr, ip
 8000b40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b44:	fb07 3610 	mls	r6, r7, r0, r3
 8000b48:	0c0b      	lsrs	r3, r1, #16
 8000b4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b52:	429e      	cmp	r6, r3
 8000b54:	fa04 f402 	lsl.w	r4, r4, r2
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x260>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b62:	d22f      	bcs.n	8000bc4 <__udivmoddi4+0x2b8>
 8000b64:	429e      	cmp	r6, r3
 8000b66:	d92d      	bls.n	8000bc4 <__udivmoddi4+0x2b8>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	1b9b      	subs	r3, r3, r6
 8000b6e:	b289      	uxth	r1, r1
 8000b70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b74:	fb07 3316 	mls	r3, r7, r6, r3
 8000b78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x28a>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b8c:	d216      	bcs.n	8000bbc <__udivmoddi4+0x2b0>
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d914      	bls.n	8000bbc <__udivmoddi4+0x2b0>
 8000b92:	3e02      	subs	r6, #2
 8000b94:	4461      	add	r1, ip
 8000b96:	1ac9      	subs	r1, r1, r3
 8000b98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b9c:	e738      	b.n	8000a10 <__udivmoddi4+0x104>
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e705      	b.n	80009b0 <__udivmoddi4+0xa4>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e3      	b.n	8000970 <__udivmoddi4+0x64>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6f8      	b.n	800099e <__udivmoddi4+0x92>
 8000bac:	454b      	cmp	r3, r9
 8000bae:	d2a9      	bcs.n	8000b04 <__udivmoddi4+0x1f8>
 8000bb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7a3      	b.n	8000b04 <__udivmoddi4+0x1f8>
 8000bbc:	4646      	mov	r6, r8
 8000bbe:	e7ea      	b.n	8000b96 <__udivmoddi4+0x28a>
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	e794      	b.n	8000aee <__udivmoddi4+0x1e2>
 8000bc4:	4640      	mov	r0, r8
 8000bc6:	e7d1      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bc8:	46d0      	mov	r8, sl
 8000bca:	e77b      	b.n	8000ac4 <__udivmoddi4+0x1b8>
 8000bcc:	3b02      	subs	r3, #2
 8000bce:	4461      	add	r1, ip
 8000bd0:	e732      	b.n	8000a38 <__udivmoddi4+0x12c>
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	e709      	b.n	80009ea <__udivmoddi4+0xde>
 8000bd6:	4464      	add	r4, ip
 8000bd8:	3802      	subs	r0, #2
 8000bda:	e742      	b.n	8000a62 <__udivmoddi4+0x156>

08000bdc <__aeabi_idiv0>:
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <adxl_write>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void adxl_write (uint8_t reg, uint8_t value)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	4613      	mov	r3, r2
 8000bee:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, adxl_address, data, 2, 100);
 8000bf8:	f107 020c 	add.w	r2, r7, #12
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2302      	movs	r3, #2
 8000c02:	21a6      	movs	r1, #166	; 0xa6
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <adxl_write+0x34>)
 8000c06:	f001 fa13 	bl	8002030 <HAL_I2C_Master_Transmit>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000094 	.word	0x20000094

08000c18 <adxl_read_values>:

void adxl_read_values (uint8_t reg)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, (uint8_t *)data_rec, 6, 100);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <adxl_read_values+0x2c>)
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	21a6      	movs	r1, #166	; 0xa6
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <adxl_read_values+0x30>)
 8000c38:	f001 faf8 	bl	800222c <HAL_I2C_Mem_Read>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000e8 	.word	0x200000e8
 8000c48:	20000094 	.word	0x20000094

08000c4c <adxl_read_address>:

void adxl_read_address (uint8_t reg)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <adxl_read_address+0x2c>)
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	21a6      	movs	r1, #166	; 0xa6
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <adxl_read_address+0x30>)
 8000c6c:	f001 fade 	bl	800222c <HAL_I2C_Mem_Read>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000ee 	.word	0x200000ee
 8000c7c:	20000094 	.word	0x20000094

08000c80 <adxl_init>:

void adxl_init (void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	adxl_read_address (0x00);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff ffe1 	bl	8000c4c <adxl_read_address>

	adxl_write (0x31, 0x01);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2031      	movs	r0, #49	; 0x31
 8000c8e:	f7ff ffa7 	bl	8000be0 <adxl_write>
	adxl_write (0x2d, 0x00);
 8000c92:	2100      	movs	r1, #0
 8000c94:	202d      	movs	r0, #45	; 0x2d
 8000c96:	f7ff ffa3 	bl	8000be0 <adxl_write>
	adxl_write (0x2d, 0x08);
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	202d      	movs	r0, #45	; 0x2d
 8000c9e:	f7ff ff9f 	bl	8000be0 <adxl_write>

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <display_data>:

void display_data (float data)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf (x_char, "%4f", data);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fd6a 	bl	800078c <__aeabi_f2d>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <display_data+0x34>)
 8000cbe:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <display_data+0x38>)
 8000cc0:	f002 fdc6 	bl	8003850 <siprintf>
    SSD1306_Puts (x_char, &Font_11x18, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <display_data+0x3c>)
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <display_data+0x38>)
 8000cca:	f000 fb93 	bl	80013f4 <SSD1306_Puts>
	SSD1306_UpdateScreen ();  // update display
 8000cce:	f000 fa55 	bl	800117c <SSD1306_UpdateScreen>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	08004144 	.word	0x08004144
 8000ce0:	20000104 	.word	0x20000104
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <main>:

/* USER CODE END 0 */

int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cec:	f000 fd44 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf0:	f000 f8da 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf4:	f000 f964 	bl	8000fc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf8:	f000 f934 	bl	8000f64 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

	SSD1306_Init();  // initialize OLED display
 8000cfc:	f000 f980 	bl	8001000 <SSD1306_Init>

  SSD1306_Fill (0);  // fill display with black color
 8000d00:	2000      	movs	r0, #0
 8000d02:	f000 fa69 	bl	80011d8 <SSD1306_Fill>

  SSD1306_GotoXY (1, 1);
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fadd 	bl	80012c8 <SSD1306_GotoXY>
  SSD1306_Puts ("Initializing...", &Font_11x18, 1);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4959      	ldr	r1, [pc, #356]	; (8000e78 <main+0x190>)
 8000d12:	485a      	ldr	r0, [pc, #360]	; (8000e7c <main+0x194>)
 8000d14:	f000 fb6e 	bl	80013f4 <SSD1306_Puts>
  SSD1306_UpdateScreen ();  // update display
 8000d18:	f000 fa30 	bl	800117c <SSD1306_UpdateScreen>

  adxl_init();  // initialize adxl
 8000d1c:	f7ff ffb0 	bl	8000c80 <adxl_init>

  SSD1306_Fill (0);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 fa59 	bl	80011d8 <SSD1306_Fill>
  SSD1306_UpdateScreen();
 8000d26:	f000 fa29 	bl	800117c <SSD1306_UpdateScreen>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		adxl_read_values (0x32);
 8000d2a:	2032      	movs	r0, #50	; 0x32
 8000d2c:	f7ff ff74 	bl	8000c18 <adxl_read_values>
	  x = ((data_rec[1]<<8)|data_rec[0]);
 8000d30:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <main+0x198>)
 8000d32:	785b      	ldrb	r3, [r3, #1]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b21a      	sxth	r2, r3
 8000d38:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <main+0x198>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <main+0x19c>)
 8000d44:	801a      	strh	r2, [r3, #0]
	  y = ((data_rec[3]<<8)|data_rec[2]);
 8000d46:	4b4e      	ldr	r3, [pc, #312]	; (8000e80 <main+0x198>)
 8000d48:	78db      	ldrb	r3, [r3, #3]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <main+0x198>)
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <main+0x1a0>)
 8000d5a:	801a      	strh	r2, [r3, #0]
	  z = ((data_rec[5]<<8)|data_rec[4]);
 8000d5c:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <main+0x198>)
 8000d5e:	795b      	ldrb	r3, [r3, #5]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <main+0x198>)
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <main+0x1a4>)
 8000d70:	801a      	strh	r2, [r3, #0]

	  xg = x * .0078;
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <main+0x19c>)
 8000d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fcf5 	bl	8000768 <__aeabi_i2d>
 8000d7e:	a33c      	add	r3, pc, #240	; (adr r3, 8000e70 <main+0x188>)
 8000d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d84:	f7ff fa74 	bl	8000270 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fd54 	bl	800083c <__aeabi_d2f>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a3e      	ldr	r2, [pc, #248]	; (8000e90 <main+0x1a8>)
 8000d98:	6013      	str	r3, [r2, #0]
	  yg = y * .0078;
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <main+0x1a0>)
 8000d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fce1 	bl	8000768 <__aeabi_i2d>
 8000da6:	a332      	add	r3, pc, #200	; (adr r3, 8000e70 <main+0x188>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fa60 	bl	8000270 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f7ff fd40 	bl	800083c <__aeabi_d2f>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a35      	ldr	r2, [pc, #212]	; (8000e94 <main+0x1ac>)
 8000dc0:	6013      	str	r3, [r2, #0]
	  zg = z * .0078;
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <main+0x1a4>)
 8000dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fccd 	bl	8000768 <__aeabi_i2d>
 8000dce:	a328      	add	r3, pc, #160	; (adr r3, 8000e70 <main+0x188>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff fa4c 	bl	8000270 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fd2c 	bl	800083c <__aeabi_d2f>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4a2c      	ldr	r2, [pc, #176]	; (8000e98 <main+0x1b0>)
 8000de8:	6013      	str	r3, [r2, #0]

	  SSD1306_GotoXY (16, 1);
 8000dea:	2101      	movs	r1, #1
 8000dec:	2010      	movs	r0, #16
 8000dee:	f000 fa6b 	bl	80012c8 <SSD1306_GotoXY>
	  SSD1306_Puts ("X: ", &Font_11x18, 1);
 8000df2:	2201      	movs	r2, #1
 8000df4:	4920      	ldr	r1, [pc, #128]	; (8000e78 <main+0x190>)
 8000df6:	4829      	ldr	r0, [pc, #164]	; (8000e9c <main+0x1b4>)
 8000df8:	f000 fafc 	bl	80013f4 <SSD1306_Puts>
	  SSD1306_GotoXY (32, 1);
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	2020      	movs	r0, #32
 8000e00:	f000 fa62 	bl	80012c8 <SSD1306_GotoXY>
	  display_data (xg);
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <main+0x1a8>)
 8000e06:	edd3 7a00 	vldr	s15, [r3]
 8000e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0e:	f7ff ff4b 	bl	8000ca8 <display_data>

	  SSD1306_GotoXY (16, 20);
 8000e12:	2114      	movs	r1, #20
 8000e14:	2010      	movs	r0, #16
 8000e16:	f000 fa57 	bl	80012c8 <SSD1306_GotoXY>
	  SSD1306_Puts ("Y: ", &Font_11x18, 1);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4916      	ldr	r1, [pc, #88]	; (8000e78 <main+0x190>)
 8000e1e:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <main+0x1b8>)
 8000e20:	f000 fae8 	bl	80013f4 <SSD1306_Puts>
	  SSD1306_GotoXY (32, 20);
 8000e24:	2114      	movs	r1, #20
 8000e26:	2020      	movs	r0, #32
 8000e28:	f000 fa4e 	bl	80012c8 <SSD1306_GotoXY>
	  display_data (yg);
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <main+0x1ac>)
 8000e2e:	edd3 7a00 	vldr	s15, [r3]
 8000e32:	eeb0 0a67 	vmov.f32	s0, s15
 8000e36:	f7ff ff37 	bl	8000ca8 <display_data>

	  SSD1306_GotoXY (16, 40);
 8000e3a:	2128      	movs	r1, #40	; 0x28
 8000e3c:	2010      	movs	r0, #16
 8000e3e:	f000 fa43 	bl	80012c8 <SSD1306_GotoXY>
 	  SSD1306_Puts ("Z: ", &Font_11x18, 1);
 8000e42:	2201      	movs	r2, #1
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <main+0x190>)
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <main+0x1bc>)
 8000e48:	f000 fad4 	bl	80013f4 <SSD1306_Puts>
	  SSD1306_GotoXY (32, 40);
 8000e4c:	2128      	movs	r1, #40	; 0x28
 8000e4e:	2020      	movs	r0, #32
 8000e50:	f000 fa3a 	bl	80012c8 <SSD1306_GotoXY>
	  display_data (zg);
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <main+0x1b0>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5e:	f7ff ff23 	bl	8000ca8 <display_data>

	  HAL_Delay (10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f000 fcfa 	bl	800185c <HAL_Delay>
		adxl_read_values (0x32);
 8000e68:	e75f      	b.n	8000d2a <main+0x42>
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
 8000e70:	8e8a71de 	.word	0x8e8a71de
 8000e74:	3f7ff2e4 	.word	0x3f7ff2e4
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	08004148 	.word	0x08004148
 8000e80:	200000e8 	.word	0x200000e8
 8000e84:	200000f0 	.word	0x200000f0
 8000e88:	200000f2 	.word	0x200000f2
 8000e8c:	200000f4 	.word	0x200000f4
 8000e90:	200000f8 	.word	0x200000f8
 8000e94:	200000fc 	.word	0x200000fc
 8000e98:	20000100 	.word	0x20000100
 8000e9c:	08004158 	.word	0x08004158
 8000ea0:	0800415c 	.word	0x0800415c
 8000ea4:	08004160 	.word	0x08004160

08000ea8 <SystemClock_Config>:
  }
  /* USER CODE END 3 */

}
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	; 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fcc2 	bl	8003840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <SystemClock_Config+0xb4>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <SystemClock_Config+0xb4>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <SystemClock_Config+0xb4>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <SystemClock_Config+0xb8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <SystemClock_Config+0xb8>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <SystemClock_Config+0xb8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 f823 	bl	8002f64 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f24:	f000 f866 	bl	8000ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fa86 	bl	8003454 <HAL_RCC_ClockConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f4e:	f000 f851 	bl	8000ff4 <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	3750      	adds	r7, #80	; 0x50
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f6a:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <MX_I2C1_Init+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_I2C1_Init+0x58>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_I2C1_Init+0x50>)
 8000fa2:	f000 ff01 	bl	8001da8 <HAL_I2C_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fac:	f000 f822 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000094 	.word	0x20000094
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	00061a80 	.word	0x00061a80

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_GPIO_Init+0x30>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <MX_GPIO_Init+0x30>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_GPIO_Init+0x30>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <Error_Handler+0x8>
	...

08001000 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001006:	f000 fa1b 	bl	8001440 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800100a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800100e:	2201      	movs	r2, #1
 8001010:	2178      	movs	r1, #120	; 0x78
 8001012:	4858      	ldr	r0, [pc, #352]	; (8001174 <SSD1306_Init+0x174>)
 8001014:	f001 fb30 	bl	8002678 <HAL_I2C_IsDeviceReady>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e0a4      	b.n	800116c <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001022:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001026:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001028:	e002      	b.n	8001030 <SSD1306_Init+0x30>
		p--;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3b01      	subs	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f9      	bne.n	800102a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001036:	22ae      	movs	r2, #174	; 0xae
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 fa72 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001040:	2220      	movs	r2, #32
 8001042:	2100      	movs	r1, #0
 8001044:	2078      	movs	r0, #120	; 0x78
 8001046:	f000 fa6d 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800104a:	2210      	movs	r2, #16
 800104c:	2100      	movs	r1, #0
 800104e:	2078      	movs	r0, #120	; 0x78
 8001050:	f000 fa68 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001054:	22b0      	movs	r2, #176	; 0xb0
 8001056:	2100      	movs	r1, #0
 8001058:	2078      	movs	r0, #120	; 0x78
 800105a:	f000 fa63 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800105e:	22c8      	movs	r2, #200	; 0xc8
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 fa5e 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fa59 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001072:	2210      	movs	r2, #16
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 fa54 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800107c:	2240      	movs	r2, #64	; 0x40
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 fa4f 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001086:	2281      	movs	r2, #129	; 0x81
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 fa4a 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 fa45 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800109a:	22a1      	movs	r2, #161	; 0xa1
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 fa40 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010a4:	22a6      	movs	r2, #166	; 0xa6
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 fa3b 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010ae:	22a8      	movs	r2, #168	; 0xa8
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 fa36 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010b8:	223f      	movs	r2, #63	; 0x3f
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 fa31 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010c2:	22a4      	movs	r2, #164	; 0xa4
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 fa2c 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010cc:	22d3      	movs	r2, #211	; 0xd3
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 fa27 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fa22 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010e0:	22d5      	movs	r2, #213	; 0xd5
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 fa1d 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010ea:	22f0      	movs	r2, #240	; 0xf0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 fa18 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80010f4:	22d9      	movs	r2, #217	; 0xd9
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 fa13 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80010fe:	2222      	movs	r2, #34	; 0x22
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 fa0e 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001108:	22da      	movs	r2, #218	; 0xda
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fa09 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001112:	2212      	movs	r2, #18
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 fa04 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800111c:	22db      	movs	r2, #219	; 0xdb
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	; 0x78
 8001122:	f000 f9ff 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001126:	2220      	movs	r2, #32
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 f9fa 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001130:	228d      	movs	r2, #141	; 0x8d
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 f9f5 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800113a:	2214      	movs	r2, #20
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 f9f0 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001144:	22af      	movs	r2, #175	; 0xaf
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 f9eb 	bl	8001524 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f842 	bl	80011d8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001154:	f000 f812 	bl	800117c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <SSD1306_Init+0x178>)
 800115a:	2200      	movs	r2, #0
 800115c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SSD1306_Init+0x178>)
 8001160:	2200      	movs	r2, #0
 8001162:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SSD1306_Init+0x178>)
 8001166:	2201      	movs	r2, #1
 8001168:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000094 	.word	0x20000094
 8001178:	20000508 	.word	0x20000508

0800117c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	e01d      	b.n	80011c4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	3b50      	subs	r3, #80	; 0x50
 800118c:	b2db      	uxtb	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	; 0x78
 8001194:	f000 f9c6 	bl	8001524 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	; 0x78
 800119e:	f000 f9c1 	bl	8001524 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011a2:	2210      	movs	r2, #16
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	; 0x78
 80011a8:	f000 f9bc 	bl	8001524 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	01db      	lsls	r3, r3, #7
 80011b0:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <SSD1306_UpdateScreen+0x58>)
 80011b2:	441a      	add	r2, r3
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	2140      	movs	r1, #64	; 0x40
 80011b8:	2078      	movs	r0, #120	; 0x78
 80011ba:	f000 f957 	bl	800146c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	3301      	adds	r3, #1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d9de      	bls.n	8001188 <SSD1306_UpdateScreen+0xc>
	}
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000108 	.word	0x20000108

080011d8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <SSD1306_Fill+0x14>
 80011e8:	2300      	movs	r3, #0
 80011ea:	e000      	b.n	80011ee <SSD1306_Fill+0x16>
 80011ec:	23ff      	movs	r3, #255	; 0xff
 80011ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f2:	4619      	mov	r1, r3
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <SSD1306_Fill+0x2c>)
 80011f6:	f002 fb23 	bl	8003840 <memset>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000108 	.word	0x20000108

08001208 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	460b      	mov	r3, r1
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	70fb      	strb	r3, [r7, #3]
	if (
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	2b7f      	cmp	r3, #127	; 0x7f
 800121e:	d848      	bhi.n	80012b2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	2b3f      	cmp	r3, #63	; 0x3f
 8001224:	d845      	bhi.n	80012b2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <SSD1306_DrawPixel+0xb8>)
 8001228:	791b      	ldrb	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d11a      	bne.n	8001278 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001242:	88fa      	ldrh	r2, [r7, #6]
 8001244:	88bb      	ldrh	r3, [r7, #4]
 8001246:	08db      	lsrs	r3, r3, #3
 8001248:	b298      	uxth	r0, r3
 800124a:	4603      	mov	r3, r0
 800124c:	01db      	lsls	r3, r3, #7
 800124e:	4413      	add	r3, r2
 8001250:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <SSD1306_DrawPixel+0xbc>)
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	b25a      	sxtb	r2, r3
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	2101      	movs	r1, #1
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	b25b      	sxtb	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b259      	sxtb	r1, r3
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	4603      	mov	r3, r0
 800126c:	01db      	lsls	r3, r3, #7
 800126e:	4413      	add	r3, r2
 8001270:	b2c9      	uxtb	r1, r1
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <SSD1306_DrawPixel+0xbc>)
 8001274:	54d1      	strb	r1, [r2, r3]
 8001276:	e01d      	b.n	80012b4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001278:	88fa      	ldrh	r2, [r7, #6]
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	08db      	lsrs	r3, r3, #3
 800127e:	b298      	uxth	r0, r3
 8001280:	4603      	mov	r3, r0
 8001282:	01db      	lsls	r3, r3, #7
 8001284:	4413      	add	r3, r2
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <SSD1306_DrawPixel+0xbc>)
 8001288:	5cd3      	ldrb	r3, [r2, r3]
 800128a:	b25a      	sxtb	r2, r3
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	b25b      	sxtb	r3, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	b25b      	sxtb	r3, r3
 800129e:	4013      	ands	r3, r2
 80012a0:	b259      	sxtb	r1, r3
 80012a2:	88fa      	ldrh	r2, [r7, #6]
 80012a4:	4603      	mov	r3, r0
 80012a6:	01db      	lsls	r3, r3, #7
 80012a8:	4413      	add	r3, r2
 80012aa:	b2c9      	uxtb	r1, r1
 80012ac:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <SSD1306_DrawPixel+0xbc>)
 80012ae:	54d1      	strb	r1, [r2, r3]
 80012b0:	e000      	b.n	80012b4 <SSD1306_DrawPixel+0xac>
		return;
 80012b2:	bf00      	nop
	}
}
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000508 	.word	0x20000508
 80012c4:	20000108 	.word	0x20000108

080012c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	460a      	mov	r2, r1
 80012d2:	80fb      	strh	r3, [r7, #6]
 80012d4:	4613      	mov	r3, r2
 80012d6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SSD1306_GotoXY+0x28>)
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <SSD1306_GotoXY+0x28>)
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	8053      	strh	r3, [r2, #2]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000508 	.word	0x20000508

080012f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001304:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <SSD1306_Putc+0xfc>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
	if (
 8001310:	2b7f      	cmp	r3, #127	; 0x7f
 8001312:	dc07      	bgt.n	8001324 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <SSD1306_Putc+0xfc>)
 8001316:	885b      	ldrh	r3, [r3, #2]
 8001318:	461a      	mov	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001320:	2b3f      	cmp	r3, #63	; 0x3f
 8001322:	dd01      	ble.n	8001328 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001324:	2300      	movs	r3, #0
 8001326:	e05e      	b.n	80013e6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e04b      	b.n	80013c6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3b20      	subs	r3, #32
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	7849      	ldrb	r1, [r1, #1]
 800133a:	fb01 f303 	mul.w	r3, r1, r3
 800133e:	4619      	mov	r1, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	440b      	add	r3, r1
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	e030      	b.n	80013b4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d010      	beq.n	8001384 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <SSD1306_Putc+0xfc>)
 8001364:	881a      	ldrh	r2, [r3, #0]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b298      	uxth	r0, r3
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <SSD1306_Putc+0xfc>)
 8001370:	885a      	ldrh	r2, [r3, #2]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	79ba      	ldrb	r2, [r7, #6]
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff ff43 	bl	8001208 <SSD1306_DrawPixel>
 8001382:	e014      	b.n	80013ae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <SSD1306_Putc+0xfc>)
 8001386:	881a      	ldrh	r2, [r3, #0]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	b298      	uxth	r0, r3
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <SSD1306_Putc+0xfc>)
 8001392:	885a      	ldrh	r2, [r3, #2]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4413      	add	r3, r2
 800139a:	b299      	uxth	r1, r3
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf0c      	ite	eq
 80013a2:	2301      	moveq	r3, #1
 80013a4:	2300      	movne	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	f7ff ff2d 	bl	8001208 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	3301      	adds	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4293      	cmp	r3, r2
 80013be:	d3c8      	bcc.n	8001352 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	461a      	mov	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d3ad      	bcc.n	800132e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <SSD1306_Putc+0xfc>)
 80013d4:	881a      	ldrh	r2, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <SSD1306_Putc+0xfc>)
 80013e2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000508 	.word	0x20000508

080013f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	4613      	mov	r3, r2
 8001400:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001402:	e012      	b.n	800142a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff71 	bl	80012f4 <SSD1306_Putc>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d002      	beq.n	8001424 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	e008      	b.n	8001436 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1e8      	bne.n	8001404 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <ssd1306_I2C_Init+0x28>)
 8001448:	607b      	str	r3, [r7, #4]
	while(p>0)
 800144a:	e002      	b.n	8001452 <ssd1306_I2C_Init+0x12>
		p--;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f9      	bne.n	800144c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	0003d090 	.word	0x0003d090

0800146c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800146c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001470:	b089      	sub	sp, #36	; 0x24
 8001472:	af02      	add	r7, sp, #8
 8001474:	603a      	str	r2, [r7, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	460b      	mov	r3, r1
 800147e:	71bb      	strb	r3, [r7, #6]
 8001480:	4613      	mov	r3, r2
 8001482:	80bb      	strh	r3, [r7, #4]
 8001484:	466b      	mov	r3, sp
 8001486:	461e      	mov	r6, r3
	uint8_t dt[count + 1];
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	1c59      	adds	r1, r3, #1
 800148c:	1e4b      	subs	r3, r1, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	460a      	mov	r2, r1
 8001492:	2300      	movs	r3, #0
 8001494:	4690      	mov	r8, r2
 8001496:	4699      	mov	r9, r3
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014ac:	460a      	mov	r2, r1
 80014ae:	2300      	movs	r3, #0
 80014b0:	4614      	mov	r4, r2
 80014b2:	461d      	mov	r5, r3
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	00eb      	lsls	r3, r5, #3
 80014be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014c2:	00e2      	lsls	r2, r4, #3
 80014c4:	460b      	mov	r3, r1
 80014c6:	3307      	adds	r3, #7
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	ebad 0d03 	sub.w	sp, sp, r3
 80014d0:	ab02      	add	r3, sp, #8
 80014d2:	3300      	adds	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	79ba      	ldrb	r2, [r7, #6]
 80014da:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80014dc:	2301      	movs	r3, #1
 80014de:	75fb      	strb	r3, [r7, #23]
 80014e0:	e00a      	b.n	80014f8 <ssd1306_I2C_WriteMulti+0x8c>
		dt[i] = data[i-1];
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	441a      	add	r2, r3
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	7811      	ldrb	r1, [r2, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	3301      	adds	r3, #1
 80014f6:	75fb      	strb	r3, [r7, #23]
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	88ba      	ldrh	r2, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d2ef      	bcs.n	80014e2 <ssd1306_I2C_WriteMulti+0x76>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	b299      	uxth	r1, r3
 8001506:	88bb      	ldrh	r3, [r7, #4]
 8001508:	220a      	movs	r2, #10
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <ssd1306_I2C_WriteMulti+0xb4>)
 8001510:	f000 fd8e 	bl	8002030 <HAL_I2C_Master_Transmit>
 8001514:	46b5      	mov	sp, r6
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001520:	20000094 	.word	0x20000094

08001524 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af02      	add	r7, sp, #8
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	460b      	mov	r3, r1
 8001530:	71bb      	strb	r3, [r7, #6]
 8001532:	4613      	mov	r3, r2
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800153a:	797b      	ldrb	r3, [r7, #5]
 800153c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b299      	uxth	r1, r3
 8001542:	f107 020c 	add.w	r2, r7, #12
 8001546:	230a      	movs	r3, #10
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2302      	movs	r3, #2
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <ssd1306_I2C_Write+0x38>)
 800154e:	f000 fd6f 	bl	8002030 <HAL_I2C_Master_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000094 	.word	0x20000094

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_MspInit+0x4c>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x4c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_I2C_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12b      	bne.n	800162a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_I2C_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_I2C_MspInit+0x88>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_I2C_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ee:	23c0      	movs	r3, #192	; 0xc0
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f2:	2312      	movs	r3, #18
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015fe:	2304      	movs	r3, #4
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <HAL_I2C_MspInit+0x8c>)
 800160a:	f000 fa31 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_I2C_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_I2C_MspInit+0x88>)
 8001618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_I2C_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40005400 	.word	0x40005400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 f8c6 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f002 f892 	bl	80037ec <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20020000 	.word	0x20020000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	20000510 	.word	0x20000510
 80016fc:	20000528 	.word	0x20000528

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001740:	4c0b      	ldr	r4, [pc, #44]	; (8001770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174e:	f7ff ffd7 	bl	8001700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f002 f851 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7ff fac7 	bl	8000ce8 <main>
  bx  lr    
 800175a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800175c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001768:	08004f1c 	.word	0x08004f1c
  ldr r2, =_sbss
 800176c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001770:	20000528 	.word	0x20000528

08001774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC_IRQHandler>
	...

08001778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_Init+0x40>)
 8001782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_Init+0x40>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x40>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f931 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fed8 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f93b 	bl	8001a56 <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 f911 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000008 	.word	0x20000008
 8001814:	20000010 	.word	0x20000010
 8001818:	2000000c 	.word	0x2000000c

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000010 	.word	0x20000010
 8001840:	20000514 	.word	0x20000514

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000514 	.word	0x20000514

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff ffee 	bl	8001844 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d005      	beq.n	8001882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_Delay+0x44>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001882:	bf00      	nop
 8001884:	f7ff ffde 	bl	8001844 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f7      	bhi.n	8001884 <HAL_Delay+0x28>
  {
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000010 	.word	0x20000010

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff47 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff5c 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffb0 	bl	80019c4 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e16b      	b.n	8001d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 815a 	bne.w	8001d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80b4 	beq.w	8001d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a5b      	ldr	r2, [pc, #364]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_GPIO_Init+0x314>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_GPIO_Init+0x318>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x31c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4e      	ldr	r2, [pc, #312]	; (8001d94 <HAL_GPIO_Init+0x324>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae90 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e12b      	b.n	8002012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fbee 	bl	80015b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	; 0x24
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e0c:	f001 fcda 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8001e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a81      	ldr	r2, [pc, #516]	; (800201c <HAL_I2C_Init+0x274>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d807      	bhi.n	8001e2c <HAL_I2C_Init+0x84>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a80      	ldr	r2, [pc, #512]	; (8002020 <HAL_I2C_Init+0x278>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	bf94      	ite	ls
 8001e24:	2301      	movls	r3, #1
 8001e26:	2300      	movhi	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e006      	b.n	8001e3a <HAL_I2C_Init+0x92>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a7d      	ldr	r2, [pc, #500]	; (8002024 <HAL_I2C_Init+0x27c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bf94      	ite	ls
 8001e34:	2301      	movls	r3, #1
 8001e36:	2300      	movhi	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0e7      	b.n	8002012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4a78      	ldr	r2, [pc, #480]	; (8002028 <HAL_I2C_Init+0x280>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	0c9b      	lsrs	r3, r3, #18
 8001e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_I2C_Init+0x274>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d802      	bhi.n	8001e7c <HAL_I2C_Init+0xd4>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	e009      	b.n	8001e90 <HAL_I2C_Init+0xe8>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	4a69      	ldr	r2, [pc, #420]	; (800202c <HAL_I2C_Init+0x284>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	3301      	adds	r3, #1
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ea2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	495c      	ldr	r1, [pc, #368]	; (800201c <HAL_I2C_Init+0x274>)
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d819      	bhi.n	8001ee4 <HAL_I2C_Init+0x13c>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ebe:	1c59      	adds	r1, r3, #1
 8001ec0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_I2C_Init+0x138>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e59      	subs	r1, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ede:	e051      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	e04f      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d111      	bne.n	8001f10 <HAL_I2C_Init+0x168>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1e58      	subs	r0, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	e012      	b.n	8001f36 <HAL_I2C_Init+0x18e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1e58      	subs	r0, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	0099      	lsls	r1, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Init+0x196>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e022      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10e      	bne.n	8001f64 <HAL_I2C_Init+0x1bc>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e58      	subs	r0, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	440b      	add	r3, r1
 8001f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f62:	e00f      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e58      	subs	r0, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	0099      	lsls	r1, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	6809      	ldr	r1, [r1, #0]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6911      	ldr	r1, [r2, #16]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68d2      	ldr	r2, [r2, #12]
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	000186a0 	.word	0x000186a0
 8002020:	001e847f 	.word	0x001e847f
 8002024:	003d08ff 	.word	0x003d08ff
 8002028:	431bde83 	.word	0x431bde83
 800202c:	10624dd3 	.word	0x10624dd3

08002030 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	461a      	mov	r2, r3
 800203c:	460b      	mov	r3, r1
 800203e:	817b      	strh	r3, [r7, #10]
 8002040:	4613      	mov	r3, r2
 8002042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff fbfe 	bl	8001844 <HAL_GetTick>
 8002048:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b20      	cmp	r3, #32
 8002054:	f040 80e0 	bne.w	8002218 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2319      	movs	r3, #25
 800205e:	2201      	movs	r2, #1
 8002060:	4970      	ldr	r1, [pc, #448]	; (8002224 <HAL_I2C_Master_Transmit+0x1f4>)
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fda0 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	e0d3      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_I2C_Master_Transmit+0x50>
 800207c:	2302      	movs	r3, #2
 800207e:	e0cc      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d007      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2221      	movs	r2, #33	; 0x21
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2210      	movs	r2, #16
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	893a      	ldrh	r2, [r7, #8]
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a50      	ldr	r2, [pc, #320]	; (8002228 <HAL_I2C_Master_Transmit+0x1f8>)
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020e8:	8979      	ldrh	r1, [r7, #10]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	6a3a      	ldr	r2, [r7, #32]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fbf0 	bl	80028d4 <I2C_MasterRequestWrite>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e08d      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002114:	e066      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	6a39      	ldr	r1, [r7, #32]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fe1a 	bl	8002d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b04      	cmp	r3, #4
 800212c:	d107      	bne.n	800213e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06b      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d11b      	bne.n	80021b8 <HAL_I2C_Master_Transmit+0x188>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d017      	beq.n	80021b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	6a39      	ldr	r1, [r7, #32]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fe0a 	bl	8002dd6 <I2C_WaitOnBTFFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d107      	bne.n	80021e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e01a      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d194      	bne.n	8002116 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	00100002 	.word	0x00100002
 8002228:	ffff0000 	.word	0xffff0000

0800222c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	817b      	strh	r3, [r7, #10]
 800223e:	460b      	mov	r3, r1
 8002240:	813b      	strh	r3, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002246:	f7ff fafd 	bl	8001844 <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	f040 8208 	bne.w	800266a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2319      	movs	r3, #25
 8002260:	2201      	movs	r2, #1
 8002262:	497b      	ldr	r1, [pc, #492]	; (8002450 <HAL_I2C_Mem_Read+0x224>)
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fc9f 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	e1fb      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Mem_Read+0x56>
 800227e:	2302      	movs	r3, #2
 8002280:	e1f4      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d007      	beq.n	80022a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2222      	movs	r2, #34	; 0x22
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a5b      	ldr	r2, [pc, #364]	; (8002454 <HAL_I2C_Mem_Read+0x228>)
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ea:	88f8      	ldrh	r0, [r7, #6]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	8979      	ldrh	r1, [r7, #10]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4603      	mov	r3, r0
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fb6c 	bl	80029d8 <I2C_RequestMemoryRead>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1b0      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	2b00      	cmp	r3, #0
 8002310:	d113      	bne.n	800233a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e184      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	2b01      	cmp	r3, #1
 8002340:	d11b      	bne.n	800237a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e164      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b02      	cmp	r3, #2
 8002380:	d11b      	bne.n	80023ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002390:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	e144      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023d0:	e138      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	f200 80f1 	bhi.w	80025be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d123      	bne.n	800242c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fd35 	bl	8002e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e139      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800242a:	e10b      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b02      	cmp	r3, #2
 8002432:	d14e      	bne.n	80024d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243a:	2200      	movs	r2, #0
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <HAL_I2C_Mem_Read+0x22c>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fbb2 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e10e      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
 800244e:	bf00      	nop
 8002450:	00100002 	.word	0x00100002
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024d0:	e0b8      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	2200      	movs	r2, #0
 80024da:	4966      	ldr	r1, [pc, #408]	; (8002674 <HAL_I2C_Mem_Read+0x448>)
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fb63 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0bf      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	2200      	movs	r2, #0
 8002536:	494f      	ldr	r1, [pc, #316]	; (8002674 <HAL_I2C_Mem_Read+0x448>)
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fb35 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e091      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025bc:	e042      	b.n	8002644 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fc48 	bl	8002e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04c      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d118      	bne.n	8002644 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f aec2 	bne.w	80023d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	00010004 	.word	0x00010004

08002678 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	460b      	mov	r3, r1
 8002686:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff f8dc 	bl	8001844 <HAL_GetTick>
 800268c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	f040 8111 	bne.w	80028c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2319      	movs	r3, #25
 80026a6:	2201      	movs	r2, #1
 80026a8:	4988      	ldr	r1, [pc, #544]	; (80028cc <HAL_I2C_IsDeviceReady+0x254>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fa7c 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	e104      	b.n	80028c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_I2C_IsDeviceReady+0x50>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0fd      	b.n	80028c4 <HAL_I2C_IsDeviceReady+0x24c>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d007      	beq.n	80026ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2224      	movs	r2, #36	; 0x24
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a70      	ldr	r2, [pc, #448]	; (80028d0 <HAL_I2C_IsDeviceReady+0x258>)
 8002710:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002720:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa3a 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00d      	beq.n	8002756 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002748:	d103      	bne.n	8002752 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0b6      	b.n	80028c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002764:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002766:	f7ff f86d 	bl	8001844 <HAL_GetTick>
 800276a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	bf0c      	ite	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	2300      	movne	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800279a:	e025      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800279c:	f7ff f852 	bl	8001844 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d302      	bcc.n	80027b2 <HAL_I2C_IsDeviceReady+0x13a>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	22a0      	movs	r2, #160	; 0xa0
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2ba0      	cmp	r3, #160	; 0xa0
 80027f2:	d005      	beq.n	8002800 <HAL_I2C_IsDeviceReady+0x188>
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_I2C_IsDeviceReady+0x188>
 80027fa:	7dbb      	ldrb	r3, [r7, #22]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0cd      	beq.n	800279c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d129      	bne.n	800286a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002824:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2319      	movs	r3, #25
 8002842:	2201      	movs	r2, #1
 8002844:	4921      	ldr	r1, [pc, #132]	; (80028cc <HAL_I2C_IsDeviceReady+0x254>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f9ae 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e036      	b.n	80028c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e02c      	b.n	80028c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002878:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002882:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2319      	movs	r3, #25
 800288a:	2201      	movs	r2, #1
 800288c:	490f      	ldr	r1, [pc, #60]	; (80028cc <HAL_I2C_IsDeviceReady+0x254>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f98a 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e012      	b.n	80028c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	3301      	adds	r3, #1
 80028a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f4ff af32 	bcc.w	8002712 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	00100002 	.word	0x00100002
 80028d0:	ffff0000 	.word	0xffff0000

080028d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	460b      	mov	r3, r1
 80028e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d006      	beq.n	80028fe <I2C_MasterRequestWrite+0x2a>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d003      	beq.n	80028fe <I2C_MasterRequestWrite+0x2a>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028fc:	d108      	bne.n	8002910 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e00b      	b.n	8002928 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	2b12      	cmp	r3, #18
 8002916:	d107      	bne.n	8002928 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002926:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f937 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00d      	beq.n	800295c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294e:	d103      	bne.n	8002958 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e035      	b.n	80029c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002964:	d108      	bne.n	8002978 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002966:	897b      	ldrh	r3, [r7, #10]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002974:	611a      	str	r2, [r3, #16]
 8002976:	e01b      	b.n	80029b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002978:	897b      	ldrh	r3, [r7, #10]
 800297a:	11db      	asrs	r3, r3, #7
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f003 0306 	and.w	r3, r3, #6
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f063 030f 	orn	r3, r3, #15
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	490e      	ldr	r1, [pc, #56]	; (80029d0 <I2C_MasterRequestWrite+0xfc>)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f95d 	bl	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e010      	b.n	80029c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029a6:	897b      	ldrh	r3, [r7, #10]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4907      	ldr	r1, [pc, #28]	; (80029d4 <I2C_MasterRequestWrite+0x100>)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f94d 	bl	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	00010008 	.word	0x00010008
 80029d4:	00010002 	.word	0x00010002

080029d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8c2 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d103      	bne.n	8002a42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0aa      	b.n	8002b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	6a3a      	ldr	r2, [r7, #32]
 8002a5a:	4952      	ldr	r1, [pc, #328]	; (8002ba4 <I2C_RequestMemoryRead+0x1cc>)
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f8fa 	bl	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e097      	b.n	8002b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a84:	6a39      	ldr	r1, [r7, #32]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f964 	bl	8002d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d107      	bne.n	8002aaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e076      	b.n	8002b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab4:	893b      	ldrh	r3, [r7, #8]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	e021      	b.n	8002b04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac0:	893b      	ldrh	r3, [r7, #8]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	6a39      	ldr	r1, [r7, #32]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f93e 	bl	8002d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d107      	bne.n	8002af6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e050      	b.n	8002b9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002afa:	893b      	ldrh	r3, [r7, #8]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b06:	6a39      	ldr	r1, [r7, #32]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f923 	bl	8002d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d107      	bne.n	8002b2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e035      	b.n	8002b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f82b 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b66:	d103      	bne.n	8002b70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e013      	b.n	8002b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b74:	897b      	ldrh	r3, [r7, #10]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	6a3a      	ldr	r2, [r7, #32]
 8002b88:	4906      	ldr	r1, [pc, #24]	; (8002ba4 <I2C_RequestMemoryRead+0x1cc>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f863 	bl	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	00010002 	.word	0x00010002

08002ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb8:	e025      	b.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d021      	beq.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc2:	f7fe fe3f 	bl	8001844 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d302      	bcc.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d116      	bne.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e023      	b.n	8002c4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d10d      	bne.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	e00c      	b.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d0b6      	beq.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c64:	e051      	b.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c74:	d123      	bne.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0204 	orr.w	r2, r3, #4
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e046      	b.n	8002d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d021      	beq.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe fdbd 	bl	8001844 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e020      	b.n	8002d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10c      	bne.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e00b      	b.n	8002d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d18d      	bne.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d60:	e02d      	b.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f8ce 	bl	8002f04 <I2C_IsAcknowledgeFailed>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02d      	b.n	8002dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d021      	beq.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fe fd63 	bl	8001844 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	2b80      	cmp	r3, #128	; 0x80
 8002dca:	d1ca      	bne.n	8002d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002de2:	e02d      	b.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f88d 	bl	8002f04 <I2C_IsAcknowledgeFailed>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e02d      	b.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d021      	beq.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfc:	f7fe fd22 	bl	8001844 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d302      	bcc.n	8002e12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d116      	bne.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e007      	b.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d1ca      	bne.n	8002de4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e64:	e042      	b.n	8002eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d119      	bne.n	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0210 	mvn.w	r2, #16
 8002e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e029      	b.n	8002efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe fccc 	bl	8001844 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e007      	b.n	8002efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d1b5      	bne.n	8002e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1a:	d11b      	bne.n	8002f54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e267      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d075      	beq.n	800306e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	4b85      	ldr	r3, [pc, #532]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d112      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9a:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d05b      	beq.n	800306c <HAL_RCC_OscConfig+0x108>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d157      	bne.n	800306c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e242      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x74>
 8002fca:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a75      	ldr	r2, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e01d      	b.n	8003014 <HAL_RCC_OscConfig+0xb0>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x98>
 8002fe2:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6f      	ldr	r2, [pc, #444]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a6c      	ldr	r2, [pc, #432]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0xb0>
 8002ffc:	4b69      	ldr	r3, [pc, #420]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a68      	ldr	r2, [pc, #416]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 800300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe fc12 	bl	8001844 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe fc0e 	bl	8001844 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e207      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0xc0>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fbfe 	bl	8001844 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fbfa 	bl	8001844 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1f3      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0xe8>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d063      	beq.n	8003142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307a:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800308e:	2b08      	cmp	r3, #8
 8003090:	d11c      	bne.n	80030cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003092:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d116      	bne.n	80030cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x152>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e1c7      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4937      	ldr	r1, [pc, #220]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	e03a      	b.n	8003142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d4:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_OscConfig+0x244>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fe fbb3 	bl	8001844 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fe fbaf 	bl	8001844 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e1a8      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4925      	ldr	r1, [pc, #148]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
 8003114:	e015      	b.n	8003142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003116:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0x244>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe fb92 	bl	8001844 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003124:	f7fe fb8e 	bl	8001844 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e187      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d036      	beq.n	80031bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d016      	beq.n	8003184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCC_OscConfig+0x248>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fb72 	bl	8001844 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003164:	f7fe fb6e 	bl	8001844 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e167      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x240>)
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x200>
 8003182:	e01b      	b.n	80031bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_OscConfig+0x248>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7fe fb5b 	bl	8001844 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003190:	e00e      	b.n	80031b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003192:	f7fe fb57 	bl	8001844 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d907      	bls.n	80031b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e150      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
 80031a4:	40023800 	.word	0x40023800
 80031a8:	42470000 	.word	0x42470000
 80031ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ea      	bne.n	8003192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8097 	beq.w	80032f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ce:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	4b7d      	ldr	r3, [pc, #500]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a7c      	ldr	r2, [pc, #496]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ea:	4b7a      	ldr	r3, [pc, #488]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f6:	2301      	movs	r3, #1
 80031f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fa:	4b77      	ldr	r3, [pc, #476]	; (80033d8 <HAL_RCC_OscConfig+0x474>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d118      	bne.n	8003238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003206:	4b74      	ldr	r3, [pc, #464]	; (80033d8 <HAL_RCC_OscConfig+0x474>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a73      	ldr	r2, [pc, #460]	; (80033d8 <HAL_RCC_OscConfig+0x474>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003212:	f7fe fb17 	bl	8001844 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321a:	f7fe fb13 	bl	8001844 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e10c      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x474>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d106      	bne.n	800324e <HAL_RCC_OscConfig+0x2ea>
 8003240:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a63      	ldr	r2, [pc, #396]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	e01c      	b.n	8003288 <HAL_RCC_OscConfig+0x324>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b05      	cmp	r3, #5
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x30c>
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a5e      	ldr	r2, [pc, #376]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a5b      	ldr	r2, [pc, #364]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0x324>
 8003270:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a57      	ldr	r2, [pc, #348]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
 800327c:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a54      	ldr	r2, [pc, #336]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003282:	f023 0304 	bic.w	r3, r3, #4
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d015      	beq.n	80032bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe fad8 	bl	8001844 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fe fad4 	bl	8001844 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0cb      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0ee      	beq.n	8003298 <HAL_RCC_OscConfig+0x334>
 80032ba:	e014      	b.n	80032e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032bc:	f7fe fac2 	bl	8001844 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c2:	e00a      	b.n	80032da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe fabe 	bl	8001844 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0b5      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032da:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ee      	bne.n	80032c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ec:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	4a38      	ldr	r2, [pc, #224]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a1 	beq.w	8003444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003302:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	d05c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d141      	bne.n	800339a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_RCC_OscConfig+0x478>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fa92 	bl	8001844 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe fa8e 	bl	8001844 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e087      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	019b      	lsls	r3, r3, #6
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	491b      	ldr	r1, [pc, #108]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x478>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe fa67 	bl	8001844 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe fa63 	bl	8001844 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e05c      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x416>
 8003398:	e054      	b.n	8003444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_RCC_OscConfig+0x478>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fa50 	bl	8001844 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe fa4c 	bl	8001844 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e045      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_OscConfig+0x470>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x444>
 80033c6:	e03d      	b.n	8003444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e038      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40007000 	.word	0x40007000
 80033dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x4ec>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d028      	beq.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d121      	bne.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d11a      	bne.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003410:	4013      	ands	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003418:	4293      	cmp	r3, r2
 800341a:	d111      	bne.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	3b01      	subs	r3, #1
 800342a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d107      	bne.n	8003440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0cc      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b68      	ldr	r3, [pc, #416]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d90c      	bls.n	8003490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b63      	ldr	r3, [pc, #396]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0b8      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a8:	4b59      	ldr	r3, [pc, #356]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a58      	ldr	r2, [pc, #352]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c0:	4b53      	ldr	r3, [pc, #332]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a52      	ldr	r2, [pc, #328]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034cc:	4b50      	ldr	r3, [pc, #320]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	494d      	ldr	r1, [pc, #308]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d044      	beq.n	8003574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d119      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e07f      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d003      	beq.n	8003512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350e:	2b03      	cmp	r3, #3
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	4b3f      	ldr	r3, [pc, #252]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e06f      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e067      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b37      	ldr	r3, [pc, #220]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4934      	ldr	r1, [pc, #208]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003544:	f7fe f97e 	bl	8001844 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fe f97a 	bl	8001844 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e04f      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d20c      	bcs.n	800359c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e032      	b.n	8003602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4916      	ldr	r1, [pc, #88]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	490e      	ldr	r1, [pc, #56]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035da:	f000 f821 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 80035de:	4602      	mov	r2, r0
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	490a      	ldr	r1, [pc, #40]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 80035ec:	5ccb      	ldrb	r3, [r1, r3]
 80035ee:	fa22 f303 	lsr.w	r3, r2, r3
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe f8de 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40023c00 	.word	0x40023c00
 8003610:	40023800 	.word	0x40023800
 8003614:	08004ec0 	.word	0x08004ec0
 8003618:	20000008 	.word	0x20000008
 800361c:	2000000c 	.word	0x2000000c

08003620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	b090      	sub	sp, #64	; 0x40
 8003626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
 800362c:	2300      	movs	r3, #0
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003630:	2300      	movs	r3, #0
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b08      	cmp	r3, #8
 8003642:	d00d      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x40>
 8003644:	2b08      	cmp	r3, #8
 8003646:	f200 80a1 	bhi.w	800378c <HAL_RCC_GetSysClockFreq+0x16c>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x34>
 800364e:	2b04      	cmp	r3, #4
 8003650:	d003      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x3a>
 8003652:	e09b      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003656:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003658:	e09b      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365a:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800365e:	e098      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003660:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366a:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d028      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003676:	4b4a      	ldr	r3, [pc, #296]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	2200      	movs	r2, #0
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	627a      	str	r2, [r7, #36]	; 0x24
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003688:	2100      	movs	r1, #0
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800368c:	fb03 f201 	mul.w	r2, r3, r1
 8003690:	2300      	movs	r3, #0
 8003692:	fb00 f303 	mul.w	r3, r0, r3
 8003696:	4413      	add	r3, r2
 8003698:	4a43      	ldr	r2, [pc, #268]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800369a:	fba0 1202 	umull	r1, r2, r0, r2
 800369e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a0:	460a      	mov	r2, r1
 80036a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80036a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a6:	4413      	add	r3, r2
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ac:	2200      	movs	r2, #0
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	61fa      	str	r2, [r7, #28]
 80036b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036ba:	f7fd f90f 	bl	80008dc <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4613      	mov	r3, r2
 80036c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c6:	e053      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	2200      	movs	r2, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	617a      	str	r2, [r7, #20]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036da:	f04f 0b00 	mov.w	fp, #0
 80036de:	4652      	mov	r2, sl
 80036e0:	465b      	mov	r3, fp
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	0159      	lsls	r1, r3, #5
 80036ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f0:	0150      	lsls	r0, r2, #5
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	ebb2 080a 	subs.w	r8, r2, sl
 80036fa:	eb63 090b 	sbc.w	r9, r3, fp
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800370a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800370e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003712:	ebb2 0408 	subs.w	r4, r2, r8
 8003716:	eb63 0509 	sbc.w	r5, r3, r9
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	00eb      	lsls	r3, r5, #3
 8003724:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003728:	00e2      	lsls	r2, r4, #3
 800372a:	4614      	mov	r4, r2
 800372c:	461d      	mov	r5, r3
 800372e:	eb14 030a 	adds.w	r3, r4, sl
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	eb45 030b 	adc.w	r3, r5, fp
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003746:	4629      	mov	r1, r5
 8003748:	028b      	lsls	r3, r1, #10
 800374a:	4621      	mov	r1, r4
 800374c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003750:	4621      	mov	r1, r4
 8003752:	028a      	lsls	r2, r1, #10
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	2200      	movs	r2, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	60fa      	str	r2, [r7, #12]
 8003760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003764:	f7fd f8ba 	bl	80008dc <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800378a:	e002      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003794:	4618      	mov	r0, r3
 8003796:	3740      	adds	r7, #64	; 0x40
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	017d7840 	.word	0x017d7840

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000008 	.word	0x20000008

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff0 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4903      	ldr	r1, [pc, #12]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08004ed0 	.word	0x08004ed0

080037ec <__errno>:
 80037ec:	4b01      	ldr	r3, [pc, #4]	; (80037f4 <__errno+0x8>)
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000014 	.word	0x20000014

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	4d0d      	ldr	r5, [pc, #52]	; (8003830 <__libc_init_array+0x38>)
 80037fc:	4c0d      	ldr	r4, [pc, #52]	; (8003834 <__libc_init_array+0x3c>)
 80037fe:	1b64      	subs	r4, r4, r5
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	2600      	movs	r6, #0
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	4d0b      	ldr	r5, [pc, #44]	; (8003838 <__libc_init_array+0x40>)
 800380a:	4c0c      	ldr	r4, [pc, #48]	; (800383c <__libc_init_array+0x44>)
 800380c:	f000 fc8e 	bl	800412c <_init>
 8003810:	1b64      	subs	r4, r4, r5
 8003812:	10a4      	asrs	r4, r4, #2
 8003814:	2600      	movs	r6, #0
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	f855 3b04 	ldr.w	r3, [r5], #4
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	08004f14 	.word	0x08004f14
 8003834:	08004f14 	.word	0x08004f14
 8003838:	08004f14 	.word	0x08004f14
 800383c:	08004f18 	.word	0x08004f18

08003840 <memset>:
 8003840:	4402      	add	r2, r0
 8003842:	4603      	mov	r3, r0
 8003844:	4293      	cmp	r3, r2
 8003846:	d100      	bne.n	800384a <memset+0xa>
 8003848:	4770      	bx	lr
 800384a:	f803 1b01 	strb.w	r1, [r3], #1
 800384e:	e7f9      	b.n	8003844 <memset+0x4>

08003850 <siprintf>:
 8003850:	b40e      	push	{r1, r2, r3}
 8003852:	b500      	push	{lr}
 8003854:	b09c      	sub	sp, #112	; 0x70
 8003856:	ab1d      	add	r3, sp, #116	; 0x74
 8003858:	9002      	str	r0, [sp, #8]
 800385a:	9006      	str	r0, [sp, #24]
 800385c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003860:	4809      	ldr	r0, [pc, #36]	; (8003888 <siprintf+0x38>)
 8003862:	9107      	str	r1, [sp, #28]
 8003864:	9104      	str	r1, [sp, #16]
 8003866:	4909      	ldr	r1, [pc, #36]	; (800388c <siprintf+0x3c>)
 8003868:	f853 2b04 	ldr.w	r2, [r3], #4
 800386c:	9105      	str	r1, [sp, #20]
 800386e:	6800      	ldr	r0, [r0, #0]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	a902      	add	r1, sp, #8
 8003874:	f000 f868 	bl	8003948 <_svfiprintf_r>
 8003878:	9b02      	ldr	r3, [sp, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	b01c      	add	sp, #112	; 0x70
 8003880:	f85d eb04 	ldr.w	lr, [sp], #4
 8003884:	b003      	add	sp, #12
 8003886:	4770      	bx	lr
 8003888:	20000014 	.word	0x20000014
 800388c:	ffff0208 	.word	0xffff0208

08003890 <__ssputs_r>:
 8003890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003894:	688e      	ldr	r6, [r1, #8]
 8003896:	429e      	cmp	r6, r3
 8003898:	4682      	mov	sl, r0
 800389a:	460c      	mov	r4, r1
 800389c:	4690      	mov	r8, r2
 800389e:	461f      	mov	r7, r3
 80038a0:	d838      	bhi.n	8003914 <__ssputs_r+0x84>
 80038a2:	898a      	ldrh	r2, [r1, #12]
 80038a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038a8:	d032      	beq.n	8003910 <__ssputs_r+0x80>
 80038aa:	6825      	ldr	r5, [r4, #0]
 80038ac:	6909      	ldr	r1, [r1, #16]
 80038ae:	eba5 0901 	sub.w	r9, r5, r1
 80038b2:	6965      	ldr	r5, [r4, #20]
 80038b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038bc:	3301      	adds	r3, #1
 80038be:	444b      	add	r3, r9
 80038c0:	106d      	asrs	r5, r5, #1
 80038c2:	429d      	cmp	r5, r3
 80038c4:	bf38      	it	cc
 80038c6:	461d      	movcc	r5, r3
 80038c8:	0553      	lsls	r3, r2, #21
 80038ca:	d531      	bpl.n	8003930 <__ssputs_r+0xa0>
 80038cc:	4629      	mov	r1, r5
 80038ce:	f000 fb63 	bl	8003f98 <_malloc_r>
 80038d2:	4606      	mov	r6, r0
 80038d4:	b950      	cbnz	r0, 80038ec <__ssputs_r+0x5c>
 80038d6:	230c      	movs	r3, #12
 80038d8:	f8ca 3000 	str.w	r3, [sl]
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e2:	81a3      	strh	r3, [r4, #12]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ec:	6921      	ldr	r1, [r4, #16]
 80038ee:	464a      	mov	r2, r9
 80038f0:	f000 fabe 	bl	8003e70 <memcpy>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fe:	81a3      	strh	r3, [r4, #12]
 8003900:	6126      	str	r6, [r4, #16]
 8003902:	6165      	str	r5, [r4, #20]
 8003904:	444e      	add	r6, r9
 8003906:	eba5 0509 	sub.w	r5, r5, r9
 800390a:	6026      	str	r6, [r4, #0]
 800390c:	60a5      	str	r5, [r4, #8]
 800390e:	463e      	mov	r6, r7
 8003910:	42be      	cmp	r6, r7
 8003912:	d900      	bls.n	8003916 <__ssputs_r+0x86>
 8003914:	463e      	mov	r6, r7
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	4632      	mov	r2, r6
 800391a:	4641      	mov	r1, r8
 800391c:	f000 fab6 	bl	8003e8c <memmove>
 8003920:	68a3      	ldr	r3, [r4, #8]
 8003922:	1b9b      	subs	r3, r3, r6
 8003924:	60a3      	str	r3, [r4, #8]
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	4433      	add	r3, r6
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	2000      	movs	r0, #0
 800392e:	e7db      	b.n	80038e8 <__ssputs_r+0x58>
 8003930:	462a      	mov	r2, r5
 8003932:	f000 fba5 	bl	8004080 <_realloc_r>
 8003936:	4606      	mov	r6, r0
 8003938:	2800      	cmp	r0, #0
 800393a:	d1e1      	bne.n	8003900 <__ssputs_r+0x70>
 800393c:	6921      	ldr	r1, [r4, #16]
 800393e:	4650      	mov	r0, sl
 8003940:	f000 fabe 	bl	8003ec0 <_free_r>
 8003944:	e7c7      	b.n	80038d6 <__ssputs_r+0x46>
	...

08003948 <_svfiprintf_r>:
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	4698      	mov	r8, r3
 800394e:	898b      	ldrh	r3, [r1, #12]
 8003950:	061b      	lsls	r3, r3, #24
 8003952:	b09d      	sub	sp, #116	; 0x74
 8003954:	4607      	mov	r7, r0
 8003956:	460d      	mov	r5, r1
 8003958:	4614      	mov	r4, r2
 800395a:	d50e      	bpl.n	800397a <_svfiprintf_r+0x32>
 800395c:	690b      	ldr	r3, [r1, #16]
 800395e:	b963      	cbnz	r3, 800397a <_svfiprintf_r+0x32>
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	f000 fb19 	bl	8003f98 <_malloc_r>
 8003966:	6028      	str	r0, [r5, #0]
 8003968:	6128      	str	r0, [r5, #16]
 800396a:	b920      	cbnz	r0, 8003976 <_svfiprintf_r+0x2e>
 800396c:	230c      	movs	r3, #12
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	e0d1      	b.n	8003b1a <_svfiprintf_r+0x1d2>
 8003976:	2340      	movs	r3, #64	; 0x40
 8003978:	616b      	str	r3, [r5, #20]
 800397a:	2300      	movs	r3, #0
 800397c:	9309      	str	r3, [sp, #36]	; 0x24
 800397e:	2320      	movs	r3, #32
 8003980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003984:	f8cd 800c 	str.w	r8, [sp, #12]
 8003988:	2330      	movs	r3, #48	; 0x30
 800398a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b34 <_svfiprintf_r+0x1ec>
 800398e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003992:	f04f 0901 	mov.w	r9, #1
 8003996:	4623      	mov	r3, r4
 8003998:	469a      	mov	sl, r3
 800399a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800399e:	b10a      	cbz	r2, 80039a4 <_svfiprintf_r+0x5c>
 80039a0:	2a25      	cmp	r2, #37	; 0x25
 80039a2:	d1f9      	bne.n	8003998 <_svfiprintf_r+0x50>
 80039a4:	ebba 0b04 	subs.w	fp, sl, r4
 80039a8:	d00b      	beq.n	80039c2 <_svfiprintf_r+0x7a>
 80039aa:	465b      	mov	r3, fp
 80039ac:	4622      	mov	r2, r4
 80039ae:	4629      	mov	r1, r5
 80039b0:	4638      	mov	r0, r7
 80039b2:	f7ff ff6d 	bl	8003890 <__ssputs_r>
 80039b6:	3001      	adds	r0, #1
 80039b8:	f000 80aa 	beq.w	8003b10 <_svfiprintf_r+0x1c8>
 80039bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039be:	445a      	add	r2, fp
 80039c0:	9209      	str	r2, [sp, #36]	; 0x24
 80039c2:	f89a 3000 	ldrb.w	r3, [sl]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80a2 	beq.w	8003b10 <_svfiprintf_r+0x1c8>
 80039cc:	2300      	movs	r3, #0
 80039ce:	f04f 32ff 	mov.w	r2, #4294967295
 80039d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039d6:	f10a 0a01 	add.w	sl, sl, #1
 80039da:	9304      	str	r3, [sp, #16]
 80039dc:	9307      	str	r3, [sp, #28]
 80039de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039e2:	931a      	str	r3, [sp, #104]	; 0x68
 80039e4:	4654      	mov	r4, sl
 80039e6:	2205      	movs	r2, #5
 80039e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ec:	4851      	ldr	r0, [pc, #324]	; (8003b34 <_svfiprintf_r+0x1ec>)
 80039ee:	f7fc fbef 	bl	80001d0 <memchr>
 80039f2:	9a04      	ldr	r2, [sp, #16]
 80039f4:	b9d8      	cbnz	r0, 8003a2e <_svfiprintf_r+0xe6>
 80039f6:	06d0      	lsls	r0, r2, #27
 80039f8:	bf44      	itt	mi
 80039fa:	2320      	movmi	r3, #32
 80039fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a00:	0711      	lsls	r1, r2, #28
 8003a02:	bf44      	itt	mi
 8003a04:	232b      	movmi	r3, #43	; 0x2b
 8003a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a10:	d015      	beq.n	8003a3e <_svfiprintf_r+0xf6>
 8003a12:	9a07      	ldr	r2, [sp, #28]
 8003a14:	4654      	mov	r4, sl
 8003a16:	2000      	movs	r0, #0
 8003a18:	f04f 0c0a 	mov.w	ip, #10
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a22:	3b30      	subs	r3, #48	; 0x30
 8003a24:	2b09      	cmp	r3, #9
 8003a26:	d94e      	bls.n	8003ac6 <_svfiprintf_r+0x17e>
 8003a28:	b1b0      	cbz	r0, 8003a58 <_svfiprintf_r+0x110>
 8003a2a:	9207      	str	r2, [sp, #28]
 8003a2c:	e014      	b.n	8003a58 <_svfiprintf_r+0x110>
 8003a2e:	eba0 0308 	sub.w	r3, r0, r8
 8003a32:	fa09 f303 	lsl.w	r3, r9, r3
 8003a36:	4313      	orrs	r3, r2
 8003a38:	9304      	str	r3, [sp, #16]
 8003a3a:	46a2      	mov	sl, r4
 8003a3c:	e7d2      	b.n	80039e4 <_svfiprintf_r+0x9c>
 8003a3e:	9b03      	ldr	r3, [sp, #12]
 8003a40:	1d19      	adds	r1, r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	9103      	str	r1, [sp, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bfbb      	ittet	lt
 8003a4a:	425b      	neglt	r3, r3
 8003a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a50:	9307      	strge	r3, [sp, #28]
 8003a52:	9307      	strlt	r3, [sp, #28]
 8003a54:	bfb8      	it	lt
 8003a56:	9204      	strlt	r2, [sp, #16]
 8003a58:	7823      	ldrb	r3, [r4, #0]
 8003a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a5c:	d10c      	bne.n	8003a78 <_svfiprintf_r+0x130>
 8003a5e:	7863      	ldrb	r3, [r4, #1]
 8003a60:	2b2a      	cmp	r3, #42	; 0x2a
 8003a62:	d135      	bne.n	8003ad0 <_svfiprintf_r+0x188>
 8003a64:	9b03      	ldr	r3, [sp, #12]
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	9203      	str	r2, [sp, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bfb8      	it	lt
 8003a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a74:	3402      	adds	r4, #2
 8003a76:	9305      	str	r3, [sp, #20]
 8003a78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b44 <_svfiprintf_r+0x1fc>
 8003a7c:	7821      	ldrb	r1, [r4, #0]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	4650      	mov	r0, sl
 8003a82:	f7fc fba5 	bl	80001d0 <memchr>
 8003a86:	b140      	cbz	r0, 8003a9a <_svfiprintf_r+0x152>
 8003a88:	2340      	movs	r3, #64	; 0x40
 8003a8a:	eba0 000a 	sub.w	r0, r0, sl
 8003a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a92:	9b04      	ldr	r3, [sp, #16]
 8003a94:	4303      	orrs	r3, r0
 8003a96:	3401      	adds	r4, #1
 8003a98:	9304      	str	r3, [sp, #16]
 8003a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a9e:	4826      	ldr	r0, [pc, #152]	; (8003b38 <_svfiprintf_r+0x1f0>)
 8003aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aa4:	2206      	movs	r2, #6
 8003aa6:	f7fc fb93 	bl	80001d0 <memchr>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d038      	beq.n	8003b20 <_svfiprintf_r+0x1d8>
 8003aae:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <_svfiprintf_r+0x1f4>)
 8003ab0:	bb1b      	cbnz	r3, 8003afa <_svfiprintf_r+0x1b2>
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	3307      	adds	r3, #7
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	3308      	adds	r3, #8
 8003abc:	9303      	str	r3, [sp, #12]
 8003abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac0:	4433      	add	r3, r6
 8003ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac4:	e767      	b.n	8003996 <_svfiprintf_r+0x4e>
 8003ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aca:	460c      	mov	r4, r1
 8003acc:	2001      	movs	r0, #1
 8003ace:	e7a5      	b.n	8003a1c <_svfiprintf_r+0xd4>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	3401      	adds	r4, #1
 8003ad4:	9305      	str	r3, [sp, #20]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f04f 0c0a 	mov.w	ip, #10
 8003adc:	4620      	mov	r0, r4
 8003ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae2:	3a30      	subs	r2, #48	; 0x30
 8003ae4:	2a09      	cmp	r2, #9
 8003ae6:	d903      	bls.n	8003af0 <_svfiprintf_r+0x1a8>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0c5      	beq.n	8003a78 <_svfiprintf_r+0x130>
 8003aec:	9105      	str	r1, [sp, #20]
 8003aee:	e7c3      	b.n	8003a78 <_svfiprintf_r+0x130>
 8003af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003af4:	4604      	mov	r4, r0
 8003af6:	2301      	movs	r3, #1
 8003af8:	e7f0      	b.n	8003adc <_svfiprintf_r+0x194>
 8003afa:	ab03      	add	r3, sp, #12
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	462a      	mov	r2, r5
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <_svfiprintf_r+0x1f8>)
 8003b02:	a904      	add	r1, sp, #16
 8003b04:	4638      	mov	r0, r7
 8003b06:	f3af 8000 	nop.w
 8003b0a:	1c42      	adds	r2, r0, #1
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	d1d6      	bne.n	8003abe <_svfiprintf_r+0x176>
 8003b10:	89ab      	ldrh	r3, [r5, #12]
 8003b12:	065b      	lsls	r3, r3, #25
 8003b14:	f53f af2c 	bmi.w	8003970 <_svfiprintf_r+0x28>
 8003b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b1a:	b01d      	add	sp, #116	; 0x74
 8003b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462a      	mov	r2, r5
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <_svfiprintf_r+0x1f8>)
 8003b28:	a904      	add	r1, sp, #16
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f000 f87a 	bl	8003c24 <_printf_i>
 8003b30:	e7eb      	b.n	8003b0a <_svfiprintf_r+0x1c2>
 8003b32:	bf00      	nop
 8003b34:	08004ed8 	.word	0x08004ed8
 8003b38:	08004ee2 	.word	0x08004ee2
 8003b3c:	00000000 	.word	0x00000000
 8003b40:	08003891 	.word	0x08003891
 8003b44:	08004ede 	.word	0x08004ede

08003b48 <_printf_common>:
 8003b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	4616      	mov	r6, r2
 8003b4e:	4699      	mov	r9, r3
 8003b50:	688a      	ldr	r2, [r1, #8]
 8003b52:	690b      	ldr	r3, [r1, #16]
 8003b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bfb8      	it	lt
 8003b5c:	4613      	movlt	r3, r2
 8003b5e:	6033      	str	r3, [r6, #0]
 8003b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b64:	4607      	mov	r7, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	b10a      	cbz	r2, 8003b6e <_printf_common+0x26>
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	0699      	lsls	r1, r3, #26
 8003b72:	bf42      	ittt	mi
 8003b74:	6833      	ldrmi	r3, [r6, #0]
 8003b76:	3302      	addmi	r3, #2
 8003b78:	6033      	strmi	r3, [r6, #0]
 8003b7a:	6825      	ldr	r5, [r4, #0]
 8003b7c:	f015 0506 	ands.w	r5, r5, #6
 8003b80:	d106      	bne.n	8003b90 <_printf_common+0x48>
 8003b82:	f104 0a19 	add.w	sl, r4, #25
 8003b86:	68e3      	ldr	r3, [r4, #12]
 8003b88:	6832      	ldr	r2, [r6, #0]
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	42ab      	cmp	r3, r5
 8003b8e:	dc26      	bgt.n	8003bde <_printf_common+0x96>
 8003b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b94:	1e13      	subs	r3, r2, #0
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	bf18      	it	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	0692      	lsls	r2, r2, #26
 8003b9e:	d42b      	bmi.n	8003bf8 <_printf_common+0xb0>
 8003ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	4638      	mov	r0, r7
 8003ba8:	47c0      	blx	r8
 8003baa:	3001      	adds	r0, #1
 8003bac:	d01e      	beq.n	8003bec <_printf_common+0xa4>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	68e5      	ldr	r5, [r4, #12]
 8003bb2:	6832      	ldr	r2, [r6, #0]
 8003bb4:	f003 0306 	and.w	r3, r3, #6
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	bf08      	it	eq
 8003bbc:	1aad      	subeq	r5, r5, r2
 8003bbe:	68a3      	ldr	r3, [r4, #8]
 8003bc0:	6922      	ldr	r2, [r4, #16]
 8003bc2:	bf0c      	ite	eq
 8003bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc8:	2500      	movne	r5, #0
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	bfc4      	itt	gt
 8003bce:	1a9b      	subgt	r3, r3, r2
 8003bd0:	18ed      	addgt	r5, r5, r3
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	341a      	adds	r4, #26
 8003bd6:	42b5      	cmp	r5, r6
 8003bd8:	d11a      	bne.n	8003c10 <_printf_common+0xc8>
 8003bda:	2000      	movs	r0, #0
 8003bdc:	e008      	b.n	8003bf0 <_printf_common+0xa8>
 8003bde:	2301      	movs	r3, #1
 8003be0:	4652      	mov	r2, sl
 8003be2:	4649      	mov	r1, r9
 8003be4:	4638      	mov	r0, r7
 8003be6:	47c0      	blx	r8
 8003be8:	3001      	adds	r0, #1
 8003bea:	d103      	bne.n	8003bf4 <_printf_common+0xac>
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf4:	3501      	adds	r5, #1
 8003bf6:	e7c6      	b.n	8003b86 <_printf_common+0x3e>
 8003bf8:	18e1      	adds	r1, r4, r3
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	2030      	movs	r0, #48	; 0x30
 8003bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c02:	4422      	add	r2, r4
 8003c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	e7c7      	b.n	8003ba0 <_printf_common+0x58>
 8003c10:	2301      	movs	r3, #1
 8003c12:	4622      	mov	r2, r4
 8003c14:	4649      	mov	r1, r9
 8003c16:	4638      	mov	r0, r7
 8003c18:	47c0      	blx	r8
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d0e6      	beq.n	8003bec <_printf_common+0xa4>
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7d9      	b.n	8003bd6 <_printf_common+0x8e>
	...

08003c24 <_printf_i>:
 8003c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c28:	7e0f      	ldrb	r7, [r1, #24]
 8003c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c2c:	2f78      	cmp	r7, #120	; 0x78
 8003c2e:	4691      	mov	r9, r2
 8003c30:	4680      	mov	r8, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	469a      	mov	sl, r3
 8003c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c3a:	d807      	bhi.n	8003c4c <_printf_i+0x28>
 8003c3c:	2f62      	cmp	r7, #98	; 0x62
 8003c3e:	d80a      	bhi.n	8003c56 <_printf_i+0x32>
 8003c40:	2f00      	cmp	r7, #0
 8003c42:	f000 80d8 	beq.w	8003df6 <_printf_i+0x1d2>
 8003c46:	2f58      	cmp	r7, #88	; 0x58
 8003c48:	f000 80a3 	beq.w	8003d92 <_printf_i+0x16e>
 8003c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c54:	e03a      	b.n	8003ccc <_printf_i+0xa8>
 8003c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c5a:	2b15      	cmp	r3, #21
 8003c5c:	d8f6      	bhi.n	8003c4c <_printf_i+0x28>
 8003c5e:	a101      	add	r1, pc, #4	; (adr r1, 8003c64 <_printf_i+0x40>)
 8003c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c64:	08003cbd 	.word	0x08003cbd
 8003c68:	08003cd1 	.word	0x08003cd1
 8003c6c:	08003c4d 	.word	0x08003c4d
 8003c70:	08003c4d 	.word	0x08003c4d
 8003c74:	08003c4d 	.word	0x08003c4d
 8003c78:	08003c4d 	.word	0x08003c4d
 8003c7c:	08003cd1 	.word	0x08003cd1
 8003c80:	08003c4d 	.word	0x08003c4d
 8003c84:	08003c4d 	.word	0x08003c4d
 8003c88:	08003c4d 	.word	0x08003c4d
 8003c8c:	08003c4d 	.word	0x08003c4d
 8003c90:	08003ddd 	.word	0x08003ddd
 8003c94:	08003d01 	.word	0x08003d01
 8003c98:	08003dbf 	.word	0x08003dbf
 8003c9c:	08003c4d 	.word	0x08003c4d
 8003ca0:	08003c4d 	.word	0x08003c4d
 8003ca4:	08003dff 	.word	0x08003dff
 8003ca8:	08003c4d 	.word	0x08003c4d
 8003cac:	08003d01 	.word	0x08003d01
 8003cb0:	08003c4d 	.word	0x08003c4d
 8003cb4:	08003c4d 	.word	0x08003c4d
 8003cb8:	08003dc7 	.word	0x08003dc7
 8003cbc:	682b      	ldr	r3, [r5, #0]
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	602a      	str	r2, [r5, #0]
 8003cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0a3      	b.n	8003e18 <_printf_i+0x1f4>
 8003cd0:	6820      	ldr	r0, [r4, #0]
 8003cd2:	6829      	ldr	r1, [r5, #0]
 8003cd4:	0606      	lsls	r6, r0, #24
 8003cd6:	f101 0304 	add.w	r3, r1, #4
 8003cda:	d50a      	bpl.n	8003cf2 <_printf_i+0xce>
 8003cdc:	680e      	ldr	r6, [r1, #0]
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	2e00      	cmp	r6, #0
 8003ce2:	da03      	bge.n	8003cec <_printf_i+0xc8>
 8003ce4:	232d      	movs	r3, #45	; 0x2d
 8003ce6:	4276      	negs	r6, r6
 8003ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cec:	485e      	ldr	r0, [pc, #376]	; (8003e68 <_printf_i+0x244>)
 8003cee:	230a      	movs	r3, #10
 8003cf0:	e019      	b.n	8003d26 <_printf_i+0x102>
 8003cf2:	680e      	ldr	r6, [r1, #0]
 8003cf4:	602b      	str	r3, [r5, #0]
 8003cf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cfa:	bf18      	it	ne
 8003cfc:	b236      	sxthne	r6, r6
 8003cfe:	e7ef      	b.n	8003ce0 <_printf_i+0xbc>
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	6820      	ldr	r0, [r4, #0]
 8003d04:	1d19      	adds	r1, r3, #4
 8003d06:	6029      	str	r1, [r5, #0]
 8003d08:	0601      	lsls	r1, r0, #24
 8003d0a:	d501      	bpl.n	8003d10 <_printf_i+0xec>
 8003d0c:	681e      	ldr	r6, [r3, #0]
 8003d0e:	e002      	b.n	8003d16 <_printf_i+0xf2>
 8003d10:	0646      	lsls	r6, r0, #25
 8003d12:	d5fb      	bpl.n	8003d0c <_printf_i+0xe8>
 8003d14:	881e      	ldrh	r6, [r3, #0]
 8003d16:	4854      	ldr	r0, [pc, #336]	; (8003e68 <_printf_i+0x244>)
 8003d18:	2f6f      	cmp	r7, #111	; 0x6f
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2308      	moveq	r3, #8
 8003d1e:	230a      	movne	r3, #10
 8003d20:	2100      	movs	r1, #0
 8003d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d26:	6865      	ldr	r5, [r4, #4]
 8003d28:	60a5      	str	r5, [r4, #8]
 8003d2a:	2d00      	cmp	r5, #0
 8003d2c:	bfa2      	ittt	ge
 8003d2e:	6821      	ldrge	r1, [r4, #0]
 8003d30:	f021 0104 	bicge.w	r1, r1, #4
 8003d34:	6021      	strge	r1, [r4, #0]
 8003d36:	b90e      	cbnz	r6, 8003d3c <_printf_i+0x118>
 8003d38:	2d00      	cmp	r5, #0
 8003d3a:	d04d      	beq.n	8003dd8 <_printf_i+0x1b4>
 8003d3c:	4615      	mov	r5, r2
 8003d3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d42:	fb03 6711 	mls	r7, r3, r1, r6
 8003d46:	5dc7      	ldrb	r7, [r0, r7]
 8003d48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d4c:	4637      	mov	r7, r6
 8003d4e:	42bb      	cmp	r3, r7
 8003d50:	460e      	mov	r6, r1
 8003d52:	d9f4      	bls.n	8003d3e <_printf_i+0x11a>
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d10b      	bne.n	8003d70 <_printf_i+0x14c>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	07de      	lsls	r6, r3, #31
 8003d5c:	d508      	bpl.n	8003d70 <_printf_i+0x14c>
 8003d5e:	6923      	ldr	r3, [r4, #16]
 8003d60:	6861      	ldr	r1, [r4, #4]
 8003d62:	4299      	cmp	r1, r3
 8003d64:	bfde      	ittt	le
 8003d66:	2330      	movle	r3, #48	; 0x30
 8003d68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d70:	1b52      	subs	r2, r2, r5
 8003d72:	6122      	str	r2, [r4, #16]
 8003d74:	f8cd a000 	str.w	sl, [sp]
 8003d78:	464b      	mov	r3, r9
 8003d7a:	aa03      	add	r2, sp, #12
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4640      	mov	r0, r8
 8003d80:	f7ff fee2 	bl	8003b48 <_printf_common>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d14c      	bne.n	8003e22 <_printf_i+0x1fe>
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	b004      	add	sp, #16
 8003d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d92:	4835      	ldr	r0, [pc, #212]	; (8003e68 <_printf_i+0x244>)
 8003d94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d98:	6829      	ldr	r1, [r5, #0]
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003da0:	6029      	str	r1, [r5, #0]
 8003da2:	061d      	lsls	r5, r3, #24
 8003da4:	d514      	bpl.n	8003dd0 <_printf_i+0x1ac>
 8003da6:	07df      	lsls	r7, r3, #31
 8003da8:	bf44      	itt	mi
 8003daa:	f043 0320 	orrmi.w	r3, r3, #32
 8003dae:	6023      	strmi	r3, [r4, #0]
 8003db0:	b91e      	cbnz	r6, 8003dba <_printf_i+0x196>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	f023 0320 	bic.w	r3, r3, #32
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	2310      	movs	r3, #16
 8003dbc:	e7b0      	b.n	8003d20 <_printf_i+0xfc>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	f043 0320 	orr.w	r3, r3, #32
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	2378      	movs	r3, #120	; 0x78
 8003dc8:	4828      	ldr	r0, [pc, #160]	; (8003e6c <_printf_i+0x248>)
 8003dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dce:	e7e3      	b.n	8003d98 <_printf_i+0x174>
 8003dd0:	0659      	lsls	r1, r3, #25
 8003dd2:	bf48      	it	mi
 8003dd4:	b2b6      	uxthmi	r6, r6
 8003dd6:	e7e6      	b.n	8003da6 <_printf_i+0x182>
 8003dd8:	4615      	mov	r5, r2
 8003dda:	e7bb      	b.n	8003d54 <_printf_i+0x130>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	6826      	ldr	r6, [r4, #0]
 8003de0:	6961      	ldr	r1, [r4, #20]
 8003de2:	1d18      	adds	r0, r3, #4
 8003de4:	6028      	str	r0, [r5, #0]
 8003de6:	0635      	lsls	r5, r6, #24
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	d501      	bpl.n	8003df0 <_printf_i+0x1cc>
 8003dec:	6019      	str	r1, [r3, #0]
 8003dee:	e002      	b.n	8003df6 <_printf_i+0x1d2>
 8003df0:	0670      	lsls	r0, r6, #25
 8003df2:	d5fb      	bpl.n	8003dec <_printf_i+0x1c8>
 8003df4:	8019      	strh	r1, [r3, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	4615      	mov	r5, r2
 8003dfc:	e7ba      	b.n	8003d74 <_printf_i+0x150>
 8003dfe:	682b      	ldr	r3, [r5, #0]
 8003e00:	1d1a      	adds	r2, r3, #4
 8003e02:	602a      	str	r2, [r5, #0]
 8003e04:	681d      	ldr	r5, [r3, #0]
 8003e06:	6862      	ldr	r2, [r4, #4]
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f7fc f9e0 	bl	80001d0 <memchr>
 8003e10:	b108      	cbz	r0, 8003e16 <_printf_i+0x1f2>
 8003e12:	1b40      	subs	r0, r0, r5
 8003e14:	6060      	str	r0, [r4, #4]
 8003e16:	6863      	ldr	r3, [r4, #4]
 8003e18:	6123      	str	r3, [r4, #16]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e20:	e7a8      	b.n	8003d74 <_printf_i+0x150>
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	462a      	mov	r2, r5
 8003e26:	4649      	mov	r1, r9
 8003e28:	4640      	mov	r0, r8
 8003e2a:	47d0      	blx	sl
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d0ab      	beq.n	8003d88 <_printf_i+0x164>
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	079b      	lsls	r3, r3, #30
 8003e34:	d413      	bmi.n	8003e5e <_printf_i+0x23a>
 8003e36:	68e0      	ldr	r0, [r4, #12]
 8003e38:	9b03      	ldr	r3, [sp, #12]
 8003e3a:	4298      	cmp	r0, r3
 8003e3c:	bfb8      	it	lt
 8003e3e:	4618      	movlt	r0, r3
 8003e40:	e7a4      	b.n	8003d8c <_printf_i+0x168>
 8003e42:	2301      	movs	r3, #1
 8003e44:	4632      	mov	r2, r6
 8003e46:	4649      	mov	r1, r9
 8003e48:	4640      	mov	r0, r8
 8003e4a:	47d0      	blx	sl
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d09b      	beq.n	8003d88 <_printf_i+0x164>
 8003e50:	3501      	adds	r5, #1
 8003e52:	68e3      	ldr	r3, [r4, #12]
 8003e54:	9903      	ldr	r1, [sp, #12]
 8003e56:	1a5b      	subs	r3, r3, r1
 8003e58:	42ab      	cmp	r3, r5
 8003e5a:	dcf2      	bgt.n	8003e42 <_printf_i+0x21e>
 8003e5c:	e7eb      	b.n	8003e36 <_printf_i+0x212>
 8003e5e:	2500      	movs	r5, #0
 8003e60:	f104 0619 	add.w	r6, r4, #25
 8003e64:	e7f5      	b.n	8003e52 <_printf_i+0x22e>
 8003e66:	bf00      	nop
 8003e68:	08004ee9 	.word	0x08004ee9
 8003e6c:	08004efa 	.word	0x08004efa

08003e70 <memcpy>:
 8003e70:	440a      	add	r2, r1
 8003e72:	4291      	cmp	r1, r2
 8003e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e78:	d100      	bne.n	8003e7c <memcpy+0xc>
 8003e7a:	4770      	bx	lr
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e86:	4291      	cmp	r1, r2
 8003e88:	d1f9      	bne.n	8003e7e <memcpy+0xe>
 8003e8a:	bd10      	pop	{r4, pc}

08003e8c <memmove>:
 8003e8c:	4288      	cmp	r0, r1
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	eb01 0402 	add.w	r4, r1, r2
 8003e94:	d902      	bls.n	8003e9c <memmove+0x10>
 8003e96:	4284      	cmp	r4, r0
 8003e98:	4623      	mov	r3, r4
 8003e9a:	d807      	bhi.n	8003eac <memmove+0x20>
 8003e9c:	1e43      	subs	r3, r0, #1
 8003e9e:	42a1      	cmp	r1, r4
 8003ea0:	d008      	beq.n	8003eb4 <memmove+0x28>
 8003ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eaa:	e7f8      	b.n	8003e9e <memmove+0x12>
 8003eac:	4402      	add	r2, r0
 8003eae:	4601      	mov	r1, r0
 8003eb0:	428a      	cmp	r2, r1
 8003eb2:	d100      	bne.n	8003eb6 <memmove+0x2a>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ebe:	e7f7      	b.n	8003eb0 <memmove+0x24>

08003ec0 <_free_r>:
 8003ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ec2:	2900      	cmp	r1, #0
 8003ec4:	d044      	beq.n	8003f50 <_free_r+0x90>
 8003ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eca:	9001      	str	r0, [sp, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f1a1 0404 	sub.w	r4, r1, #4
 8003ed2:	bfb8      	it	lt
 8003ed4:	18e4      	addlt	r4, r4, r3
 8003ed6:	f000 f913 	bl	8004100 <__malloc_lock>
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <_free_r+0x94>)
 8003edc:	9801      	ldr	r0, [sp, #4]
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	b933      	cbnz	r3, 8003ef0 <_free_r+0x30>
 8003ee2:	6063      	str	r3, [r4, #4]
 8003ee4:	6014      	str	r4, [r2, #0]
 8003ee6:	b003      	add	sp, #12
 8003ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eec:	f000 b90e 	b.w	800410c <__malloc_unlock>
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	d908      	bls.n	8003f06 <_free_r+0x46>
 8003ef4:	6825      	ldr	r5, [r4, #0]
 8003ef6:	1961      	adds	r1, r4, r5
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	bf01      	itttt	eq
 8003efc:	6819      	ldreq	r1, [r3, #0]
 8003efe:	685b      	ldreq	r3, [r3, #4]
 8003f00:	1949      	addeq	r1, r1, r5
 8003f02:	6021      	streq	r1, [r4, #0]
 8003f04:	e7ed      	b.n	8003ee2 <_free_r+0x22>
 8003f06:	461a      	mov	r2, r3
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b10b      	cbz	r3, 8003f10 <_free_r+0x50>
 8003f0c:	42a3      	cmp	r3, r4
 8003f0e:	d9fa      	bls.n	8003f06 <_free_r+0x46>
 8003f10:	6811      	ldr	r1, [r2, #0]
 8003f12:	1855      	adds	r5, r2, r1
 8003f14:	42a5      	cmp	r5, r4
 8003f16:	d10b      	bne.n	8003f30 <_free_r+0x70>
 8003f18:	6824      	ldr	r4, [r4, #0]
 8003f1a:	4421      	add	r1, r4
 8003f1c:	1854      	adds	r4, r2, r1
 8003f1e:	42a3      	cmp	r3, r4
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	d1e0      	bne.n	8003ee6 <_free_r+0x26>
 8003f24:	681c      	ldr	r4, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	6053      	str	r3, [r2, #4]
 8003f2a:	4421      	add	r1, r4
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	e7da      	b.n	8003ee6 <_free_r+0x26>
 8003f30:	d902      	bls.n	8003f38 <_free_r+0x78>
 8003f32:	230c      	movs	r3, #12
 8003f34:	6003      	str	r3, [r0, #0]
 8003f36:	e7d6      	b.n	8003ee6 <_free_r+0x26>
 8003f38:	6825      	ldr	r5, [r4, #0]
 8003f3a:	1961      	adds	r1, r4, r5
 8003f3c:	428b      	cmp	r3, r1
 8003f3e:	bf04      	itt	eq
 8003f40:	6819      	ldreq	r1, [r3, #0]
 8003f42:	685b      	ldreq	r3, [r3, #4]
 8003f44:	6063      	str	r3, [r4, #4]
 8003f46:	bf04      	itt	eq
 8003f48:	1949      	addeq	r1, r1, r5
 8003f4a:	6021      	streq	r1, [r4, #0]
 8003f4c:	6054      	str	r4, [r2, #4]
 8003f4e:	e7ca      	b.n	8003ee6 <_free_r+0x26>
 8003f50:	b003      	add	sp, #12
 8003f52:	bd30      	pop	{r4, r5, pc}
 8003f54:	20000518 	.word	0x20000518

08003f58 <sbrk_aligned>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4e0e      	ldr	r6, [pc, #56]	; (8003f94 <sbrk_aligned+0x3c>)
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	6831      	ldr	r1, [r6, #0]
 8003f60:	4605      	mov	r5, r0
 8003f62:	b911      	cbnz	r1, 8003f6a <sbrk_aligned+0x12>
 8003f64:	f000 f8bc 	bl	80040e0 <_sbrk_r>
 8003f68:	6030      	str	r0, [r6, #0]
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f8b7 	bl	80040e0 <_sbrk_r>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d00a      	beq.n	8003f8c <sbrk_aligned+0x34>
 8003f76:	1cc4      	adds	r4, r0, #3
 8003f78:	f024 0403 	bic.w	r4, r4, #3
 8003f7c:	42a0      	cmp	r0, r4
 8003f7e:	d007      	beq.n	8003f90 <sbrk_aligned+0x38>
 8003f80:	1a21      	subs	r1, r4, r0
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 f8ac 	bl	80040e0 <_sbrk_r>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d101      	bne.n	8003f90 <sbrk_aligned+0x38>
 8003f8c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f90:	4620      	mov	r0, r4
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	2000051c 	.word	0x2000051c

08003f98 <_malloc_r>:
 8003f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9c:	1ccd      	adds	r5, r1, #3
 8003f9e:	f025 0503 	bic.w	r5, r5, #3
 8003fa2:	3508      	adds	r5, #8
 8003fa4:	2d0c      	cmp	r5, #12
 8003fa6:	bf38      	it	cc
 8003fa8:	250c      	movcc	r5, #12
 8003faa:	2d00      	cmp	r5, #0
 8003fac:	4607      	mov	r7, r0
 8003fae:	db01      	blt.n	8003fb4 <_malloc_r+0x1c>
 8003fb0:	42a9      	cmp	r1, r5
 8003fb2:	d905      	bls.n	8003fc0 <_malloc_r+0x28>
 8003fb4:	230c      	movs	r3, #12
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	2600      	movs	r6, #0
 8003fba:	4630      	mov	r0, r6
 8003fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc0:	4e2e      	ldr	r6, [pc, #184]	; (800407c <_malloc_r+0xe4>)
 8003fc2:	f000 f89d 	bl	8004100 <__malloc_lock>
 8003fc6:	6833      	ldr	r3, [r6, #0]
 8003fc8:	461c      	mov	r4, r3
 8003fca:	bb34      	cbnz	r4, 800401a <_malloc_r+0x82>
 8003fcc:	4629      	mov	r1, r5
 8003fce:	4638      	mov	r0, r7
 8003fd0:	f7ff ffc2 	bl	8003f58 <sbrk_aligned>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	d14d      	bne.n	8004076 <_malloc_r+0xde>
 8003fda:	6834      	ldr	r4, [r6, #0]
 8003fdc:	4626      	mov	r6, r4
 8003fde:	2e00      	cmp	r6, #0
 8003fe0:	d140      	bne.n	8004064 <_malloc_r+0xcc>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	eb04 0803 	add.w	r8, r4, r3
 8003fec:	f000 f878 	bl	80040e0 <_sbrk_r>
 8003ff0:	4580      	cmp	r8, r0
 8003ff2:	d13a      	bne.n	800406a <_malloc_r+0xd2>
 8003ff4:	6821      	ldr	r1, [r4, #0]
 8003ff6:	3503      	adds	r5, #3
 8003ff8:	1a6d      	subs	r5, r5, r1
 8003ffa:	f025 0503 	bic.w	r5, r5, #3
 8003ffe:	3508      	adds	r5, #8
 8004000:	2d0c      	cmp	r5, #12
 8004002:	bf38      	it	cc
 8004004:	250c      	movcc	r5, #12
 8004006:	4629      	mov	r1, r5
 8004008:	4638      	mov	r0, r7
 800400a:	f7ff ffa5 	bl	8003f58 <sbrk_aligned>
 800400e:	3001      	adds	r0, #1
 8004010:	d02b      	beq.n	800406a <_malloc_r+0xd2>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	442b      	add	r3, r5
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	e00e      	b.n	8004038 <_malloc_r+0xa0>
 800401a:	6822      	ldr	r2, [r4, #0]
 800401c:	1b52      	subs	r2, r2, r5
 800401e:	d41e      	bmi.n	800405e <_malloc_r+0xc6>
 8004020:	2a0b      	cmp	r2, #11
 8004022:	d916      	bls.n	8004052 <_malloc_r+0xba>
 8004024:	1961      	adds	r1, r4, r5
 8004026:	42a3      	cmp	r3, r4
 8004028:	6025      	str	r5, [r4, #0]
 800402a:	bf18      	it	ne
 800402c:	6059      	strne	r1, [r3, #4]
 800402e:	6863      	ldr	r3, [r4, #4]
 8004030:	bf08      	it	eq
 8004032:	6031      	streq	r1, [r6, #0]
 8004034:	5162      	str	r2, [r4, r5]
 8004036:	604b      	str	r3, [r1, #4]
 8004038:	4638      	mov	r0, r7
 800403a:	f104 060b 	add.w	r6, r4, #11
 800403e:	f000 f865 	bl	800410c <__malloc_unlock>
 8004042:	f026 0607 	bic.w	r6, r6, #7
 8004046:	1d23      	adds	r3, r4, #4
 8004048:	1af2      	subs	r2, r6, r3
 800404a:	d0b6      	beq.n	8003fba <_malloc_r+0x22>
 800404c:	1b9b      	subs	r3, r3, r6
 800404e:	50a3      	str	r3, [r4, r2]
 8004050:	e7b3      	b.n	8003fba <_malloc_r+0x22>
 8004052:	6862      	ldr	r2, [r4, #4]
 8004054:	42a3      	cmp	r3, r4
 8004056:	bf0c      	ite	eq
 8004058:	6032      	streq	r2, [r6, #0]
 800405a:	605a      	strne	r2, [r3, #4]
 800405c:	e7ec      	b.n	8004038 <_malloc_r+0xa0>
 800405e:	4623      	mov	r3, r4
 8004060:	6864      	ldr	r4, [r4, #4]
 8004062:	e7b2      	b.n	8003fca <_malloc_r+0x32>
 8004064:	4634      	mov	r4, r6
 8004066:	6876      	ldr	r6, [r6, #4]
 8004068:	e7b9      	b.n	8003fde <_malloc_r+0x46>
 800406a:	230c      	movs	r3, #12
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4638      	mov	r0, r7
 8004070:	f000 f84c 	bl	800410c <__malloc_unlock>
 8004074:	e7a1      	b.n	8003fba <_malloc_r+0x22>
 8004076:	6025      	str	r5, [r4, #0]
 8004078:	e7de      	b.n	8004038 <_malloc_r+0xa0>
 800407a:	bf00      	nop
 800407c:	20000518 	.word	0x20000518

08004080 <_realloc_r>:
 8004080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004084:	4680      	mov	r8, r0
 8004086:	4614      	mov	r4, r2
 8004088:	460e      	mov	r6, r1
 800408a:	b921      	cbnz	r1, 8004096 <_realloc_r+0x16>
 800408c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004090:	4611      	mov	r1, r2
 8004092:	f7ff bf81 	b.w	8003f98 <_malloc_r>
 8004096:	b92a      	cbnz	r2, 80040a4 <_realloc_r+0x24>
 8004098:	f7ff ff12 	bl	8003ec0 <_free_r>
 800409c:	4625      	mov	r5, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040a4:	f000 f838 	bl	8004118 <_malloc_usable_size_r>
 80040a8:	4284      	cmp	r4, r0
 80040aa:	4607      	mov	r7, r0
 80040ac:	d802      	bhi.n	80040b4 <_realloc_r+0x34>
 80040ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040b2:	d812      	bhi.n	80040da <_realloc_r+0x5a>
 80040b4:	4621      	mov	r1, r4
 80040b6:	4640      	mov	r0, r8
 80040b8:	f7ff ff6e 	bl	8003f98 <_malloc_r>
 80040bc:	4605      	mov	r5, r0
 80040be:	2800      	cmp	r0, #0
 80040c0:	d0ed      	beq.n	800409e <_realloc_r+0x1e>
 80040c2:	42bc      	cmp	r4, r7
 80040c4:	4622      	mov	r2, r4
 80040c6:	4631      	mov	r1, r6
 80040c8:	bf28      	it	cs
 80040ca:	463a      	movcs	r2, r7
 80040cc:	f7ff fed0 	bl	8003e70 <memcpy>
 80040d0:	4631      	mov	r1, r6
 80040d2:	4640      	mov	r0, r8
 80040d4:	f7ff fef4 	bl	8003ec0 <_free_r>
 80040d8:	e7e1      	b.n	800409e <_realloc_r+0x1e>
 80040da:	4635      	mov	r5, r6
 80040dc:	e7df      	b.n	800409e <_realloc_r+0x1e>
	...

080040e0 <_sbrk_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d06      	ldr	r5, [pc, #24]	; (80040fc <_sbrk_r+0x1c>)
 80040e4:	2300      	movs	r3, #0
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7fd fad2 	bl	8001694 <_sbrk>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_sbrk_r+0x1a>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_sbrk_r+0x1a>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	20000520 	.word	0x20000520

08004100 <__malloc_lock>:
 8004100:	4801      	ldr	r0, [pc, #4]	; (8004108 <__malloc_lock+0x8>)
 8004102:	f000 b811 	b.w	8004128 <__retarget_lock_acquire_recursive>
 8004106:	bf00      	nop
 8004108:	20000524 	.word	0x20000524

0800410c <__malloc_unlock>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__malloc_unlock+0x8>)
 800410e:	f000 b80c 	b.w	800412a <__retarget_lock_release_recursive>
 8004112:	bf00      	nop
 8004114:	20000524 	.word	0x20000524

08004118 <_malloc_usable_size_r>:
 8004118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411c:	1f18      	subs	r0, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfbc      	itt	lt
 8004122:	580b      	ldrlt	r3, [r1, r0]
 8004124:	18c0      	addlt	r0, r0, r3
 8004126:	4770      	bx	lr

08004128 <__retarget_lock_acquire_recursive>:
 8004128:	4770      	bx	lr

0800412a <__retarget_lock_release_recursive>:
 800412a:	4770      	bx	lr

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
