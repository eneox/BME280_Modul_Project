
BME280_Modul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd0  08003bd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bd8  08003bd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007515  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013f6  00000000  00000000  00027551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  00028948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  00029048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f60a  00000000  00000000  000296b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f59  00000000  00000000  00048cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bea3f  00000000  00000000  00051c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011065a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d90  00000000  00000000  001106ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ba0 	.word	0x08003ba0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ba0 	.word	0x08003ba0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_ldivmod>:
 8000a04:	b97b      	cbnz	r3, 8000a26 <__aeabi_ldivmod+0x22>
 8000a06:	b972      	cbnz	r2, 8000a26 <__aeabi_ldivmod+0x22>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bfbe      	ittt	lt
 8000a0c:	2000      	movlt	r0, #0
 8000a0e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a12:	e006      	blt.n	8000a22 <__aeabi_ldivmod+0x1e>
 8000a14:	bf08      	it	eq
 8000a16:	2800      	cmpeq	r0, #0
 8000a18:	bf1c      	itt	ne
 8000a1a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a1e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a22:	f000 b9bf 	b.w	8000da4 <__aeabi_idiv0>
 8000a26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2e:	2900      	cmp	r1, #0
 8000a30:	db09      	blt.n	8000a46 <__aeabi_ldivmod+0x42>
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db1a      	blt.n	8000a6c <__aeabi_ldivmod+0x68>
 8000a36:	f000 f84d 	bl	8000ad4 <__udivmoddi4>
 8000a3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a42:	b004      	add	sp, #16
 8000a44:	4770      	bx	lr
 8000a46:	4240      	negs	r0, r0
 8000a48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db1b      	blt.n	8000a88 <__aeabi_ldivmod+0x84>
 8000a50:	f000 f840 	bl	8000ad4 <__udivmoddi4>
 8000a54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a5c:	b004      	add	sp, #16
 8000a5e:	4240      	negs	r0, r0
 8000a60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a64:	4252      	negs	r2, r2
 8000a66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a6a:	4770      	bx	lr
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a72:	f000 f82f 	bl	8000ad4 <__udivmoddi4>
 8000a76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a7e:	b004      	add	sp, #16
 8000a80:	4240      	negs	r0, r0
 8000a82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a86:	4770      	bx	lr
 8000a88:	4252      	negs	r2, r2
 8000a8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a8e:	f000 f821 	bl	8000ad4 <__udivmoddi4>
 8000a92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9a:	b004      	add	sp, #16
 8000a9c:	4252      	negs	r2, r2
 8000a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b974 	b.w	8000da4 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	4604      	mov	r4, r0
 8000adc:	468e      	mov	lr, r1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d14d      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae2:	428a      	cmp	r2, r1
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	d969      	bls.n	8000bbc <__udivmoddi4+0xe8>
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	b152      	cbz	r2, 8000b04 <__udivmoddi4+0x30>
 8000aee:	fa01 f302 	lsl.w	r3, r1, r2
 8000af2:	f1c2 0120 	rsb	r1, r2, #32
 8000af6:	fa20 f101 	lsr.w	r1, r0, r1
 8000afa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afe:	ea41 0e03 	orr.w	lr, r1, r3
 8000b02:	4094      	lsls	r4, r2
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	0c21      	lsrs	r1, r4, #16
 8000b0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b0e:	fa1f f78c 	uxth.w	r7, ip
 8000b12:	fb08 e316 	mls	r3, r8, r6, lr
 8000b16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b1a:	fb06 f107 	mul.w	r1, r6, r7
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2a:	f080 811f 	bcs.w	8000d6c <__udivmoddi4+0x298>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 811c 	bls.w	8000d6c <__udivmoddi4+0x298>
 8000b34:	3e02      	subs	r6, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b40:	fb08 3310 	mls	r3, r8, r0, r3
 8000b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b48:	fb00 f707 	mul.w	r7, r0, r7
 8000b4c:	42a7      	cmp	r7, r4
 8000b4e:	d90a      	bls.n	8000b66 <__udivmoddi4+0x92>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b58:	f080 810a 	bcs.w	8000d70 <__udivmoddi4+0x29c>
 8000b5c:	42a7      	cmp	r7, r4
 8000b5e:	f240 8107 	bls.w	8000d70 <__udivmoddi4+0x29c>
 8000b62:	4464      	add	r4, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6a:	1be4      	subs	r4, r4, r7
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	b11d      	cbz	r5, 8000b78 <__udivmoddi4+0xa4>
 8000b70:	40d4      	lsrs	r4, r2
 8000b72:	2300      	movs	r3, #0
 8000b74:	e9c5 4300 	strd	r4, r3, [r5]
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0xc2>
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	f000 80ef 	beq.w	8000d66 <__udivmoddi4+0x292>
 8000b88:	2600      	movs	r6, #0
 8000b8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8e:	4630      	mov	r0, r6
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	fab3 f683 	clz	r6, r3
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d14a      	bne.n	8000c34 <__udivmoddi4+0x160>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xd4>
 8000ba2:	4282      	cmp	r2, r0
 8000ba4:	f200 80f9 	bhi.w	8000d9a <__udivmoddi4+0x2c6>
 8000ba8:	1a84      	subs	r4, r0, r2
 8000baa:	eb61 0303 	sbc.w	r3, r1, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d0e0      	beq.n	8000b78 <__udivmoddi4+0xa4>
 8000bb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bba:	e7dd      	b.n	8000b78 <__udivmoddi4+0xa4>
 8000bbc:	b902      	cbnz	r2, 8000bc0 <__udivmoddi4+0xec>
 8000bbe:	deff      	udf	#255	; 0xff
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	f040 8092 	bne.w	8000cee <__udivmoddi4+0x21a>
 8000bca:	eba1 010c 	sub.w	r1, r1, ip
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2601      	movs	r6, #1
 8000bd8:	0c20      	lsrs	r0, r4, #16
 8000bda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bde:	fb07 1113 	mls	r1, r7, r3, r1
 8000be2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be6:	fb0e f003 	mul.w	r0, lr, r3
 8000bea:	4288      	cmp	r0, r1
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x12c>
 8000bee:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x12a>
 8000bf8:	4288      	cmp	r0, r1
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2c0>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	1a09      	subs	r1, r1, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c08:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x156>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x154>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2ca>
 8000c28:	4608      	mov	r0, r1
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c32:	e79c      	b.n	8000b6e <__udivmoddi4+0x9a>
 8000c34:	f1c6 0720 	rsb	r7, r6, #32
 8000c38:	40b3      	lsls	r3, r6
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa20 f407 	lsr.w	r4, r0, r7
 8000c46:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4a:	431c      	orrs	r4, r3
 8000c4c:	40f9      	lsrs	r1, r7
 8000c4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c52:	fa00 f306 	lsl.w	r3, r0, r6
 8000c56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c5a:	0c20      	lsrs	r0, r4, #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fb09 1118 	mls	r1, r9, r8, r1
 8000c64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c68:	fb08 f00e 	mul.w	r0, r8, lr
 8000c6c:	4288      	cmp	r0, r1
 8000c6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b8>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2bc>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2bc>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1a09      	subs	r1, r1, r0
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c94:	fb09 1110 	mls	r1, r9, r0, r1
 8000c98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	458e      	cmp	lr, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1e2>
 8000ca4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2b4>
 8000cae:	458e      	cmp	lr, r1
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2b4>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4461      	add	r1, ip
 8000cb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cba:	fba0 9402 	umull	r9, r4, r0, r2
 8000cbe:	eba1 010e 	sub.w	r1, r1, lr
 8000cc2:	42a1      	cmp	r1, r4
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46a6      	mov	lr, r4
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x2a4>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x2a0>
 8000ccc:	b15d      	cbz	r5, 8000ce6 <__udivmoddi4+0x212>
 8000cce:	ebb3 0208 	subs.w	r2, r3, r8
 8000cd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cda:	fa22 f306 	lsr.w	r3, r2, r6
 8000cde:	40f1      	lsrs	r1, r6
 8000ce0:	431f      	orrs	r7, r3
 8000ce2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	40d8      	lsrs	r0, r3
 8000cf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4301      	orrs	r1, r0
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d10:	0c0b      	lsrs	r3, r1, #16
 8000d12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d16:	fb00 f60e 	mul.w	r6, r0, lr
 8000d1a:	429e      	cmp	r6, r3
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x260>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b8>
 8000d2c:	429e      	cmp	r6, r3
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b8>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	1b9b      	subs	r3, r3, r6
 8000d36:	b289      	uxth	r1, r1
 8000d38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb06 f30e 	mul.w	r3, r6, lr
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x28a>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2b0>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2b0>
 8000d5a:	3e02      	subs	r6, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	1ac9      	subs	r1, r1, r3
 8000d60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0x104>
 8000d66:	462e      	mov	r6, r5
 8000d68:	4628      	mov	r0, r5
 8000d6a:	e705      	b.n	8000b78 <__udivmoddi4+0xa4>
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	e6e3      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e6f8      	b.n	8000b66 <__udivmoddi4+0x92>
 8000d74:	454b      	cmp	r3, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f8>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d80:	3801      	subs	r0, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f8>
 8000d84:	4646      	mov	r6, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x28a>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1e2>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x260>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b8>
 8000d94:	3b02      	subs	r3, #2
 8000d96:	4461      	add	r1, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x12c>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e709      	b.n	8000bb2 <__udivmoddi4+0xde>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x156>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	2319      	movs	r3, #25
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	463b      	mov	r3, r7
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	2288      	movs	r2, #136	; 0x88
 8000dc0:	21ec      	movs	r1, #236	; 0xec
 8000dc2:	4857      	ldr	r0, [pc, #348]	; (8000f20 <TrimRead+0x178>)
 8000dc4:	f001 fcfa 	bl	80027bc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000dc8:	463b      	mov	r3, r7
 8000dca:	3319      	adds	r3, #25
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	9202      	str	r2, [sp, #8]
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	9201      	str	r2, [sp, #4]
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	22e1      	movs	r2, #225	; 0xe1
 8000ddc:	21ec      	movs	r1, #236	; 0xec
 8000dde:	4850      	ldr	r0, [pc, #320]	; (8000f20 <TrimRead+0x178>)
 8000de0:	f001 fcec 	bl	80027bc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000de4:	787b      	ldrb	r3, [r7, #1]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	783b      	ldrb	r3, [r7, #0]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <TrimRead+0x17c>)
 8000df6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	78bb      	ldrb	r3, [r7, #2]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <TrimRead+0x180>)
 8000e08:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000e0a:	797b      	ldrb	r3, [r7, #5]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	793b      	ldrb	r3, [r7, #4]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <TrimRead+0x184>)
 8000e1a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <TrimRead+0x188>)
 8000e2e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000e30:	7a7b      	ldrb	r3, [r7, #9]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <TrimRead+0x18c>)
 8000e40:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	7abb      	ldrb	r3, [r7, #10]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <TrimRead+0x190>)
 8000e52:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000e54:	7b7b      	ldrb	r3, [r7, #13]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	7b3b      	ldrb	r3, [r7, #12]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <TrimRead+0x194>)
 8000e64:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <TrimRead+0x198>)
 8000e76:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000e78:	7c7b      	ldrb	r3, [r7, #17]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	7c3b      	ldrb	r3, [r7, #16]
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <TrimRead+0x19c>)
 8000e88:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000e8a:	7cfb      	ldrb	r3, [r7, #19]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7cbb      	ldrb	r3, [r7, #18]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <TrimRead+0x1a0>)
 8000e9a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000e9c:	7d7b      	ldrb	r3, [r7, #21]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7d3b      	ldrb	r3, [r7, #20]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <TrimRead+0x1a4>)
 8000eac:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	7dbb      	ldrb	r3, [r7, #22]
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <TrimRead+0x1a8>)
 8000ebe:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000ec0:	7e3b      	ldrb	r3, [r7, #24]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <TrimRead+0x1ac>)
 8000ec6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000ec8:	7ebb      	ldrb	r3, [r7, #26]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7e7b      	ldrb	r3, [r7, #25]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <TrimRead+0x1b0>)
 8000ed8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000eda:	7efb      	ldrb	r3, [r7, #27]
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <TrimRead+0x1b4>)
 8000ee0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000ee2:	7f3b      	ldrb	r3, [r7, #28]
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	7f7b      	ldrb	r3, [r7, #29]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <TrimRead+0x1b8>)
 8000ef8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000efa:	7fbb      	ldrb	r3, [r7, #30]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	7f7b      	ldrb	r3, [r7, #29]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <TrimRead+0x1bc>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000f10:	7ffb      	ldrb	r3, [r7, #31]
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <TrimRead+0x1c0>)
 8000f16:	801a      	strh	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000060 	.word	0x20000060
 8000f24:	20000038 	.word	0x20000038
 8000f28:	20000040 	.word	0x20000040
 8000f2c:	20000042 	.word	0x20000042
 8000f30:	2000003a 	.word	0x2000003a
 8000f34:	20000044 	.word	0x20000044
 8000f38:	20000046 	.word	0x20000046
 8000f3c:	20000048 	.word	0x20000048
 8000f40:	2000004a 	.word	0x2000004a
 8000f44:	2000004c 	.word	0x2000004c
 8000f48:	2000004e 	.word	0x2000004e
 8000f4c:	20000050 	.word	0x20000050
 8000f50:	20000052 	.word	0x20000052
 8000f54:	2000003c 	.word	0x2000003c
 8000f58:	20000054 	.word	0x20000054
 8000f5c:	2000003e 	.word	0x2000003e
 8000f60:	20000056 	.word	0x20000056
 8000f64:	20000058 	.word	0x20000058
 8000f68:	2000005a 	.word	0x2000005a

08000f6c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71bb      	strb	r3, [r7, #6]
 8000f82:	460b      	mov	r3, r1
 8000f84:	717b      	strb	r3, [r7, #5]
 8000f86:	4613      	mov	r3, r2
 8000f88:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000f8a:	f7ff ff0d 	bl	8000da8 <TrimRead>


	uint8_t datatowrite = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000f96:	23b6      	movs	r3, #182	; 0xb6
 8000f98:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f107 030f 	add.w	r3, r7, #15
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	22e0      	movs	r2, #224	; 0xe0
 8000fae:	21ec      	movs	r1, #236	; 0xec
 8000fb0:	4858      	ldr	r0, [pc, #352]	; (8001114 <BME280_Config+0x1a8>)
 8000fb2:	f001 fb09 	bl	80025c8 <HAL_I2C_Mem_Write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <BME280_Config+0x56>
	{
		return -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	e0a3      	b.n	800110a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f000 ff16 	bl	8001df4 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000fc8:	797b      	ldrb	r3, [r7, #5]
 8000fca:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 030f 	add.w	r3, r7, #15
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	22f2      	movs	r2, #242	; 0xf2
 8000fe0:	21ec      	movs	r1, #236	; 0xec
 8000fe2:	484c      	ldr	r0, [pc, #304]	; (8001114 <BME280_Config+0x1a8>)
 8000fe4:	f001 faf0 	bl	80025c8 <HAL_I2C_Mem_Write>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <BME280_Config+0x88>
	{
		return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e08a      	b.n	800110a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f000 fefd 	bl	8001df4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	9302      	str	r3, [sp, #8]
 8001000:	2301      	movs	r3, #1
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	f107 030e 	add.w	r3, r7, #14
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	22f2      	movs	r2, #242	; 0xf2
 800100e:	21ec      	movs	r1, #236	; 0xec
 8001010:	4840      	ldr	r0, [pc, #256]	; (8001114 <BME280_Config+0x1a8>)
 8001012:	f001 fbd3 	bl	80027bc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001016:	7bba      	ldrb	r2, [r7, #14]
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	429a      	cmp	r2, r3
 800101c:	d002      	beq.n	8001024 <BME280_Config+0xb8>
	{
		return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e072      	b.n	800110a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001024:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001028:	015b      	lsls	r3, r3, #5
 800102a:	b25a      	sxtb	r2, r3
 800102c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	b25b      	sxtb	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800103c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2301      	movs	r3, #1
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 030f 	add.w	r3, r7, #15
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	22f5      	movs	r2, #245	; 0xf5
 8001050:	21ec      	movs	r1, #236	; 0xec
 8001052:	4830      	ldr	r0, [pc, #192]	; (8001114 <BME280_Config+0x1a8>)
 8001054:	f001 fab8 	bl	80025c8 <HAL_I2C_Mem_Write>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <BME280_Config+0xf8>
	{
		return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e052      	b.n	800110a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001064:	2064      	movs	r0, #100	; 0x64
 8001066:	f000 fec5 	bl	8001df4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2301      	movs	r3, #1
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	f107 030e 	add.w	r3, r7, #14
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	22f5      	movs	r2, #245	; 0xf5
 800107e:	21ec      	movs	r1, #236	; 0xec
 8001080:	4824      	ldr	r0, [pc, #144]	; (8001114 <BME280_Config+0x1a8>)
 8001082:	f001 fb9b 	bl	80027bc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001086:	7bba      	ldrb	r2, [r7, #14]
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	429a      	cmp	r2, r3
 800108c:	d002      	beq.n	8001094 <BME280_Config+0x128>
	{
		return -1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e03a      	b.n	800110a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	b25a      	sxtb	r2, r3
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b25a      	sxtb	r2, r3
 80010a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80010b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	2301      	movs	r3, #1
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	f107 030f 	add.w	r3, r7, #15
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	22f4      	movs	r2, #244	; 0xf4
 80010c4:	21ec      	movs	r1, #236	; 0xec
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <BME280_Config+0x1a8>)
 80010c8:	f001 fa7e 	bl	80025c8 <HAL_I2C_Mem_Write>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <BME280_Config+0x16c>
	{
		return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e018      	b.n	800110a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f000 fe8b 	bl	8001df4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	f107 030e 	add.w	r3, r7, #14
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	22f4      	movs	r2, #244	; 0xf4
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <BME280_Config+0x1a8>)
 80010f6:	f001 fb61 	bl	80027bc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80010fa:	7bba      	ldrb	r2, [r7, #14]
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d002      	beq.n	8001108 <BME280_Config+0x19c>
	{
		return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e000      	b.n	800110a <BME280_Config+0x19e>
	}

	return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bd90      	pop	{r4, r7, pc}
 8001112:	bf00      	nop
 8001114:	20000060 	.word	0x20000060

08001118 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <BMEReadRaw+0x8c>)
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	22d0      	movs	r2, #208	; 0xd0
 8001130:	21ec      	movs	r1, #236	; 0xec
 8001132:	481d      	ldr	r0, [pc, #116]	; (80011a8 <BMEReadRaw+0x90>)
 8001134:	f001 fb42 	bl	80027bc <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <BMEReadRaw+0x8c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b60      	cmp	r3, #96	; 0x60
 800113e:	d12a      	bne.n	8001196 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2308      	movs	r3, #8
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	463b      	mov	r3, r7
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	22f7      	movs	r2, #247	; 0xf7
 8001152:	21ec      	movs	r1, #236	; 0xec
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <BMEReadRaw+0x90>)
 8001156:	f001 fb31 	bl	80027bc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800115a:	783b      	ldrb	r3, [r7, #0]
 800115c:	031a      	lsls	r2, r3, #12
 800115e:	787b      	ldrb	r3, [r7, #1]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	4313      	orrs	r3, r2
 8001164:	78ba      	ldrb	r2, [r7, #2]
 8001166:	0912      	lsrs	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	4313      	orrs	r3, r2
 800116c:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <BMEReadRaw+0x94>)
 800116e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	031a      	lsls	r2, r3, #12
 8001174:	793b      	ldrb	r3, [r7, #4]
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	4313      	orrs	r3, r2
 800117a:	797a      	ldrb	r2, [r7, #5]
 800117c:	0912      	lsrs	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	4313      	orrs	r3, r2
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <BMEReadRaw+0x98>)
 8001184:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	4313      	orrs	r3, r2
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <BMEReadRaw+0x9c>)
 8001190:	6013      	str	r3, [r2, #0]

		return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e001      	b.n	800119a <BMEReadRaw+0x82>
	}

	else return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000028 	.word	0x20000028
 80011a8:	20000060 	.word	0x20000060
 80011ac:	20000030 	.word	0x20000030
 80011b0:	2000002c 	.word	0x2000002c
 80011b4:	20000034 	.word	0x20000034

080011b8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	10da      	asrs	r2, r3, #3
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <BME280_compensate_T_int32+0x74>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <BME280_compensate_T_int32+0x78>)
 80011ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	12db      	asrs	r3, r3, #11
 80011d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	111b      	asrs	r3, r3, #4
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <BME280_compensate_T_int32+0x74>)
 80011e0:	8812      	ldrh	r2, [r2, #0]
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	1112      	asrs	r2, r2, #4
 80011e8:	4910      	ldr	r1, [pc, #64]	; (800122c <BME280_compensate_T_int32+0x74>)
 80011ea:	8809      	ldrh	r1, [r1, #0]
 80011ec:	1a52      	subs	r2, r2, r1
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	131b      	asrs	r3, r3, #12
 80011f4:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <BME280_compensate_T_int32+0x7c>)
 80011f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	139b      	asrs	r3, r3, #14
 8001200:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4413      	add	r3, r2
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <BME280_compensate_T_int32+0x80>)
 800120a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <BME280_compensate_T_int32+0x80>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3380      	adds	r3, #128	; 0x80
 8001218:	121b      	asrs	r3, r3, #8
 800121a:	60fb      	str	r3, [r7, #12]
	return T;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000038 	.word	0x20000038
 8001230:	20000040 	.word	0x20000040
 8001234:	20000042 	.word	0x20000042
 8001238:	2000005c 	.word	0x2000005c

0800123c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800123c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001240:	b0ca      	sub	sp, #296	; 0x128
 8001242:	af00      	add	r7, sp, #0
 8001244:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001248:	4baf      	ldr	r3, [pc, #700]	; (8001508 <BME280_compensate_P_int64+0x2cc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	17da      	asrs	r2, r3, #31
 800124e:	461c      	mov	r4, r3
 8001250:	4615      	mov	r5, r2
 8001252:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001256:	f145 3bff 	adc.w	fp, r5, #4294967295
 800125a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800125e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001262:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001266:	fb03 f102 	mul.w	r1, r3, r2
 800126a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800126e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	18ca      	adds	r2, r1, r3
 8001278:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800127c:	fba3 8903 	umull	r8, r9, r3, r3
 8001280:	eb02 0309 	add.w	r3, r2, r9
 8001284:	4699      	mov	r9, r3
 8001286:	4ba1      	ldr	r3, [pc, #644]	; (800150c <BME280_compensate_P_int64+0x2d0>)
 8001288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128c:	b21b      	sxth	r3, r3
 800128e:	17da      	asrs	r2, r3, #31
 8001290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001294:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001298:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800129c:	4603      	mov	r3, r0
 800129e:	fb03 f209 	mul.w	r2, r3, r9
 80012a2:	460b      	mov	r3, r1
 80012a4:	fb08 f303 	mul.w	r3, r8, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	4602      	mov	r2, r0
 80012ac:	fba8 1202 	umull	r1, r2, r8, r2
 80012b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80012b4:	460a      	mov	r2, r1
 80012b6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80012ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80012be:	4413      	add	r3, r2
 80012c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80012c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80012c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80012cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012d0:	4b8f      	ldr	r3, [pc, #572]	; (8001510 <BME280_compensate_P_int64+0x2d4>)
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	17da      	asrs	r2, r3, #31
 80012da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012de:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80012e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012e6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80012ea:	462a      	mov	r2, r5
 80012ec:	fb02 f203 	mul.w	r2, r2, r3
 80012f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012f4:	4621      	mov	r1, r4
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	441a      	add	r2, r3
 80012fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001300:	4621      	mov	r1, r4
 8001302:	fba3 1301 	umull	r1, r3, r3, r1
 8001306:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800130a:	460b      	mov	r3, r1
 800130c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800131a:	f04f 0000 	mov.w	r0, #0
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001326:	462b      	mov	r3, r5
 8001328:	0459      	lsls	r1, r3, #17
 800132a:	4623      	mov	r3, r4
 800132c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001330:	4623      	mov	r3, r4
 8001332:	0458      	lsls	r0, r3, #17
 8001334:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001338:	1814      	adds	r4, r2, r0
 800133a:	643c      	str	r4, [r7, #64]	; 0x40
 800133c:	414b      	adcs	r3, r1
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
 8001340:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001344:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001348:	4b72      	ldr	r3, [pc, #456]	; (8001514 <BME280_compensate_P_int64+0x2d8>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	b21b      	sxth	r3, r3
 8001350:	17da      	asrs	r2, r3, #31
 8001352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001356:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800135a:	f04f 0000 	mov.w	r0, #0
 800135e:	f04f 0100 	mov.w	r1, #0
 8001362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001366:	00d9      	lsls	r1, r3, #3
 8001368:	2000      	movs	r0, #0
 800136a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800136e:	1814      	adds	r4, r2, r0
 8001370:	63bc      	str	r4, [r7, #56]	; 0x38
 8001372:	414b      	adcs	r3, r1
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001376:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800137a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800137e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001386:	fb03 f102 	mul.w	r1, r3, r2
 800138a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800138e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	18ca      	adds	r2, r1, r3
 8001398:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800139c:	fba3 1303 	umull	r1, r3, r3, r3
 80013a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013a4:	460b      	mov	r3, r1
 80013a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80013aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013ae:	18d3      	adds	r3, r2, r3
 80013b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <BME280_compensate_P_int64+0x2dc>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	17da      	asrs	r2, r3, #31
 80013be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80013c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80013c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80013ca:	462b      	mov	r3, r5
 80013cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80013d0:	4642      	mov	r2, r8
 80013d2:	fb02 f203 	mul.w	r2, r2, r3
 80013d6:	464b      	mov	r3, r9
 80013d8:	4621      	mov	r1, r4
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	4622      	mov	r2, r4
 80013e2:	4641      	mov	r1, r8
 80013e4:	fba2 1201 	umull	r1, r2, r2, r1
 80013e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80013ec:	460a      	mov	r2, r1
 80013ee:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80013f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80013f6:	4413      	add	r3, r2
 80013f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80013fc:	f04f 0000 	mov.w	r0, #0
 8001400:	f04f 0100 	mov.w	r1, #0
 8001404:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001408:	4623      	mov	r3, r4
 800140a:	0a18      	lsrs	r0, r3, #8
 800140c:	462b      	mov	r3, r5
 800140e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001412:	462b      	mov	r3, r5
 8001414:	1219      	asrs	r1, r3, #8
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <BME280_compensate_P_int64+0x2e0>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	b21b      	sxth	r3, r3
 800141e:	17da      	asrs	r2, r3, #31
 8001420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001424:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001428:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800142c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001430:	464a      	mov	r2, r9
 8001432:	fb02 f203 	mul.w	r2, r2, r3
 8001436:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800143a:	4644      	mov	r4, r8
 800143c:	fb04 f303 	mul.w	r3, r4, r3
 8001440:	441a      	add	r2, r3
 8001442:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001446:	4644      	mov	r4, r8
 8001448:	fba3 4304 	umull	r4, r3, r3, r4
 800144c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001450:	4623      	mov	r3, r4
 8001452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001456:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800145a:	18d3      	adds	r3, r2, r3
 800145c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800146c:	464c      	mov	r4, r9
 800146e:	0323      	lsls	r3, r4, #12
 8001470:	4644      	mov	r4, r8
 8001472:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001476:	4644      	mov	r4, r8
 8001478:	0322      	lsls	r2, r4, #12
 800147a:	1884      	adds	r4, r0, r2
 800147c:	633c      	str	r4, [r7, #48]	; 0x30
 800147e:	eb41 0303 	adc.w	r3, r1, r3
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
 8001484:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001488:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800148c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001490:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001494:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001498:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <BME280_compensate_P_int64+0x2e4>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014ac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014b0:	462b      	mov	r3, r5
 80014b2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80014b6:	4642      	mov	r2, r8
 80014b8:	fb02 f203 	mul.w	r2, r2, r3
 80014bc:	464b      	mov	r3, r9
 80014be:	4621      	mov	r1, r4
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	4622      	mov	r2, r4
 80014c8:	4641      	mov	r1, r8
 80014ca:	fba2 1201 	umull	r1, r2, r2, r1
 80014ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80014d2:	460a      	mov	r2, r1
 80014d4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80014d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80014dc:	4413      	add	r3, r2
 80014de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80014ee:	4629      	mov	r1, r5
 80014f0:	104a      	asrs	r2, r1, #1
 80014f2:	4629      	mov	r1, r5
 80014f4:	17cb      	asrs	r3, r1, #31
 80014f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80014fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014fe:	4313      	orrs	r3, r2
 8001500:	d110      	bne.n	8001524 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001502:	2300      	movs	r3, #0
 8001504:	e154      	b.n	80017b0 <BME280_compensate_P_int64+0x574>
 8001506:	bf00      	nop
 8001508:	2000005c 	.word	0x2000005c
 800150c:	2000004c 	.word	0x2000004c
 8001510:	2000004a 	.word	0x2000004a
 8001514:	20000048 	.word	0x20000048
 8001518:	20000046 	.word	0x20000046
 800151c:	20000044 	.word	0x20000044
 8001520:	2000003a 	.word	0x2000003a
	}
	p = 1048576-adc_P;
 8001524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001528:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800152c:	17da      	asrs	r2, r3, #31
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001532:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001536:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800153a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800153e:	105b      	asrs	r3, r3, #1
 8001540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001544:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001548:	07db      	lsls	r3, r3, #31
 800154a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800154e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001552:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001556:	4621      	mov	r1, r4
 8001558:	1a89      	subs	r1, r1, r2
 800155a:	67b9      	str	r1, [r7, #120]	; 0x78
 800155c:	4629      	mov	r1, r5
 800155e:	eb61 0303 	sbc.w	r3, r1, r3
 8001562:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001564:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001568:	4622      	mov	r2, r4
 800156a:	462b      	mov	r3, r5
 800156c:	1891      	adds	r1, r2, r2
 800156e:	6239      	str	r1, [r7, #32]
 8001570:	415b      	adcs	r3, r3
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
 8001574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001578:	4621      	mov	r1, r4
 800157a:	1851      	adds	r1, r2, r1
 800157c:	61b9      	str	r1, [r7, #24]
 800157e:	4629      	mov	r1, r5
 8001580:	414b      	adcs	r3, r1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001590:	4649      	mov	r1, r9
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	4641      	mov	r1, r8
 8001596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159a:	4641      	mov	r1, r8
 800159c:	018a      	lsls	r2, r1, #6
 800159e:	4641      	mov	r1, r8
 80015a0:	1889      	adds	r1, r1, r2
 80015a2:	6139      	str	r1, [r7, #16]
 80015a4:	4649      	mov	r1, r9
 80015a6:	eb43 0101 	adc.w	r1, r3, r1
 80015aa:	6179      	str	r1, [r7, #20]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015b8:	4649      	mov	r1, r9
 80015ba:	008b      	lsls	r3, r1, #2
 80015bc:	4641      	mov	r1, r8
 80015be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015c2:	4641      	mov	r1, r8
 80015c4:	008a      	lsls	r2, r1, #2
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	4622      	mov	r2, r4
 80015ce:	189b      	adds	r3, r3, r2
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	460b      	mov	r3, r1
 80015d4:	462a      	mov	r2, r5
 80015d6:	eb42 0303 	adc.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015e8:	4649      	mov	r1, r9
 80015ea:	008b      	lsls	r3, r1, #2
 80015ec:	4641      	mov	r1, r8
 80015ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015f2:	4641      	mov	r1, r8
 80015f4:	008a      	lsls	r2, r1, #2
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	4622      	mov	r2, r4
 80015fe:	189b      	adds	r3, r3, r2
 8001600:	673b      	str	r3, [r7, #112]	; 0x70
 8001602:	462b      	mov	r3, r5
 8001604:	460a      	mov	r2, r1
 8001606:	eb42 0303 	adc.w	r3, r2, r3
 800160a:	677b      	str	r3, [r7, #116]	; 0x74
 800160c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001610:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001614:	f7ff f9f6 	bl	8000a04 <__aeabi_ldivmod>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001620:	4b66      	ldr	r3, [pc, #408]	; (80017bc <BME280_compensate_P_int64+0x580>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	b21b      	sxth	r3, r3
 8001628:	17da      	asrs	r2, r3, #31
 800162a:	66bb      	str	r3, [r7, #104]	; 0x68
 800162c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800162e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	0b50      	lsrs	r0, r2, #13
 800163c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001640:	1359      	asrs	r1, r3, #13
 8001642:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001646:	462b      	mov	r3, r5
 8001648:	fb00 f203 	mul.w	r2, r0, r3
 800164c:	4623      	mov	r3, r4
 800164e:	fb03 f301 	mul.w	r3, r3, r1
 8001652:	4413      	add	r3, r2
 8001654:	4622      	mov	r2, r4
 8001656:	fba2 1200 	umull	r1, r2, r2, r0
 800165a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800165e:	460a      	mov	r2, r1
 8001660:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001664:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001668:	4413      	add	r3, r2
 800166a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800166e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0b50      	lsrs	r0, r2, #13
 800167c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001680:	1359      	asrs	r1, r3, #13
 8001682:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001686:	462b      	mov	r3, r5
 8001688:	fb00 f203 	mul.w	r2, r0, r3
 800168c:	4623      	mov	r3, r4
 800168e:	fb03 f301 	mul.w	r3, r3, r1
 8001692:	4413      	add	r3, r2
 8001694:	4622      	mov	r2, r4
 8001696:	fba2 1200 	umull	r1, r2, r2, r0
 800169a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800169e:	460a      	mov	r2, r1
 80016a0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80016a8:	4413      	add	r3, r2
 80016aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016ba:	4621      	mov	r1, r4
 80016bc:	0e4a      	lsrs	r2, r1, #25
 80016be:	4629      	mov	r1, r5
 80016c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016c4:	4629      	mov	r1, r5
 80016c6:	164b      	asrs	r3, r1, #25
 80016c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016cc:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <BME280_compensate_P_int64+0x584>)
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	17da      	asrs	r2, r3, #31
 80016d6:	663b      	str	r3, [r7, #96]	; 0x60
 80016d8:	667a      	str	r2, [r7, #100]	; 0x64
 80016da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016e2:	462a      	mov	r2, r5
 80016e4:	fb02 f203 	mul.w	r2, r2, r3
 80016e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ec:	4621      	mov	r1, r4
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80016f8:	4621      	mov	r1, r4
 80016fa:	fba2 1201 	umull	r1, r2, r2, r1
 80016fe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001702:	460a      	mov	r2, r1
 8001704:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001708:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800171e:	4621      	mov	r1, r4
 8001720:	0cca      	lsrs	r2, r1, #19
 8001722:	4629      	mov	r1, r5
 8001724:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001728:	4629      	mov	r1, r5
 800172a:	14cb      	asrs	r3, r1, #19
 800172c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001730:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001734:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001738:	1884      	adds	r4, r0, r2
 800173a:	65bc      	str	r4, [r7, #88]	; 0x58
 800173c:	eb41 0303 	adc.w	r3, r1, r3
 8001740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001742:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001746:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800174a:	4621      	mov	r1, r4
 800174c:	1889      	adds	r1, r1, r2
 800174e:	6539      	str	r1, [r7, #80]	; 0x50
 8001750:	4629      	mov	r1, r5
 8001752:	eb43 0101 	adc.w	r1, r3, r1
 8001756:	6579      	str	r1, [r7, #84]	; 0x54
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001764:	4623      	mov	r3, r4
 8001766:	0a18      	lsrs	r0, r3, #8
 8001768:	462b      	mov	r3, r5
 800176a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800176e:	462b      	mov	r3, r5
 8001770:	1219      	asrs	r1, r3, #8
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <BME280_compensate_P_int64+0x588>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	b21b      	sxth	r3, r3
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	64bb      	str	r3, [r7, #72]	; 0x48
 800177e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800178c:	464c      	mov	r4, r9
 800178e:	0123      	lsls	r3, r4, #4
 8001790:	4644      	mov	r4, r8
 8001792:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001796:	4644      	mov	r4, r8
 8001798:	0122      	lsls	r2, r4, #4
 800179a:	1884      	adds	r4, r0, r2
 800179c:	603c      	str	r4, [r7, #0]
 800179e:	eb41 0303 	adc.w	r3, r1, r3
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 80017ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80017b6:	46bd      	mov	sp, r7
 80017b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017bc:	20000052 	.word	0x20000052
 80017c0:	20000050 	.word	0x20000050
 80017c4:	2000004e 	.word	0x2000004e

080017c8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <bme280_compensate_H_int32+0xbc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80017d8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	039a      	lsls	r2, r3, #14
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <bme280_compensate_H_int32+0xc0>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	051b      	lsls	r3, r3, #20
 80017e6:	1ad2      	subs	r2, r2, r3
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <bme280_compensate_H_int32+0xc4>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	4619      	mov	r1, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80017f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80017fc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80017fe:	4a24      	ldr	r2, [pc, #144]	; (8001890 <bme280_compensate_H_int32+0xc8>)
 8001800:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001804:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800180c:	1292      	asrs	r2, r2, #10
 800180e:	4921      	ldr	r1, [pc, #132]	; (8001894 <bme280_compensate_H_int32+0xcc>)
 8001810:	8809      	ldrh	r1, [r1, #0]
 8001812:	4608      	mov	r0, r1
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	fb00 f101 	mul.w	r1, r0, r1
 800181a:	12c9      	asrs	r1, r1, #11
 800181c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001820:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001824:	1292      	asrs	r2, r2, #10
 8001826:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800182a:	491b      	ldr	r1, [pc, #108]	; (8001898 <bme280_compensate_H_int32+0xd0>)
 800182c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001830:	fb01 f202 	mul.w	r2, r1, r2
 8001834:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001838:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	13db      	asrs	r3, r3, #15
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	13d2      	asrs	r2, r2, #15
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <bme280_compensate_H_int32+0xd4>)
 8001850:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001852:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001856:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001864:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800186c:	bfa8      	it	ge
 800186e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001872:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	131b      	asrs	r3, r3, #12
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	2000005c 	.word	0x2000005c
 8001888:	20000056 	.word	0x20000056
 800188c:	20000058 	.word	0x20000058
 8001890:	2000005a 	.word	0x2000005a
 8001894:	2000003e 	.word	0x2000003e
 8001898:	20000054 	.word	0x20000054
 800189c:	2000003c 	.word	0x2000003c

080018a0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80018a4:	f7ff fc38 	bl	8001118 <BMEReadRaw>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d163      	bne.n	8001976 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <BME280_Measure+0xf4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018b6:	d104      	bne.n	80018c2 <BME280_Measure+0x22>
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <BME280_Measure+0xf8>)
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e016      	b.n	80018f0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <BME280_Measure+0xf4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fc76 	bl	80011b8 <BME280_compensate_T_int32>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdcc 	bl	800046c <__aeabi_i2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <BME280_Measure+0xfc>)
 80018da:	f7fe ff5b 	bl	8000794 <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f83d 	bl	8000964 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <BME280_Measure+0xf8>)
 80018ee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <BME280_Measure+0x100>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018f8:	d104      	bne.n	8001904 <BME280_Measure+0x64>
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <BME280_Measure+0x104>)
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e016      	b.n	8001932 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <BME280_Measure+0x100>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc97 	bl	800123c <BME280_compensate_P_int64>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fd9b 	bl	800044c <__aeabi_ui2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <BME280_Measure+0x108>)
 800191c:	f7fe ff3a 	bl	8000794 <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f81c 	bl	8000964 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <BME280_Measure+0x104>)
 8001930:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <BME280_Measure+0x10c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800193a:	d104      	bne.n	8001946 <BME280_Measure+0xa6>
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <BME280_Measure+0x110>)
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001944:	e023      	b.n	800198e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <BME280_Measure+0x10c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff3c 	bl	80017c8 <bme280_compensate_H_int32>
 8001950:	4603      	mov	r3, r0
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd7a 	bl	800044c <__aeabi_ui2d>
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <BME280_Measure+0x114>)
 800195e:	f7fe ff19 	bl	8000794 <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7fe fffb 	bl	8000964 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <BME280_Measure+0x110>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	e00b      	b.n	800198e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <BME280_Measure+0x110>)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <BME280_Measure+0x110>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <BME280_Measure+0x104>)
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <BME280_Measure+0x104>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a03      	ldr	r2, [pc, #12]	; (8001998 <BME280_Measure+0xf8>)
 800198c:	6013      	str	r3, [r2, #0]
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000002c 	.word	0x2000002c
 8001998:	200000b4 	.word	0x200000b4
 800199c:	40590000 	.word	0x40590000
 80019a0:	20000030 	.word	0x20000030
 80019a4:	200000b8 	.word	0x200000b8
 80019a8:	40700000 	.word	0x40700000
 80019ac:	20000034 	.word	0x20000034
 80019b0:	200000bc 	.word	0x200000bc
 80019b4:	40900000 	.word	0x40900000

080019b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019be:	f000 f9a7 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c2:	f000 f815 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c6:	f000 f89f 	bl	8001b08 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019ca:	f000 f86f 	bl	8001aac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80019ce:	2304      	movs	r3, #4
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	2300      	movs	r3, #0
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2303      	movs	r3, #3
 80019d8:	2201      	movs	r2, #1
 80019da:	2105      	movs	r1, #5
 80019dc:	2002      	movs	r0, #2
 80019de:	f7ff fac5 	bl	8000f6c <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BME280_Measure();
 80019e2:	f7ff ff5d 	bl	80018a0 <BME280_Measure>
	  HAL_Delay (500);
 80019e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ea:	f000 fa03 	bl	8001df4 <HAL_Delay>
	  BME280_Measure();
 80019ee:	e7f8      	b.n	80019e2 <main+0x2a>

080019f0 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	; 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 f8c6 	bl	8003b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <SystemClock_Config+0xb4>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <SystemClock_Config+0xb4>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <SystemClock_Config+0xb4>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <SystemClock_Config+0xb8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <SystemClock_Config+0xb8>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <SystemClock_Config+0xb8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a50:	2301      	movs	r3, #1
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a54:	2310      	movs	r3, #16
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5c:	f107 0320 	add.w	r3, r7, #32
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fc2d 	bl	80032c0 <HAL_RCC_OscConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a6c:	f000 f874 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a70:	230f      	movs	r3, #15
 8001a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fe90 	bl	80037b0 <HAL_RCC_ClockConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a96:	f000 f85f 	bl	8001b58 <Error_Handler>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3750      	adds	r7, #80	; 0x50
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000

08001aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_I2C1_Init+0x50>)
 8001ab2:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <MX_I2C1_Init+0x54>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_I2C1_Init+0x50>)
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_I2C1_Init+0x58>)
 8001aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_I2C1_Init+0x50>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_I2C1_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_I2C1_Init+0x50>)
 8001aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <MX_I2C1_Init+0x50>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_I2C1_Init+0x50>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MX_I2C1_Init+0x50>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_I2C1_Init+0x50>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_I2C1_Init+0x50>)
 8001aea:	f000 fc29 	bl	8002340 <HAL_I2C_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001af4:	f000 f830 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000060 	.word	0x20000060
 8001b00:	40005400 	.word	0x40005400
 8001b04:	00061a80 	.word	0x00061a80

08001b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_GPIO_Init+0x4c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <MX_GPIO_Init+0x4c>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <MX_GPIO_Init+0x4c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_GPIO_Init+0x4c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <MX_GPIO_Init+0x4c>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_GPIO_Init+0x4c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>
	...

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_I2C_MspInit+0x84>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d12b      	bne.n	8001c2e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf2:	23c0      	movs	r3, #192	; 0xc0
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf6:	2312      	movs	r3, #18
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c02:	2304      	movs	r3, #4
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <HAL_I2C_MspInit+0x8c>)
 8001c0e:	f000 f9fb 	bl	8002008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020400 	.word	0x40020400

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f000 f890 	bl	8001db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <SystemInit+0x20>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <SystemInit+0x20>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cc2:	490e      	ldr	r1, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd8:	4c0b      	ldr	r4, [pc, #44]	; (8001d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce6:	f7ff ffd7 	bl	8001c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cea:	f001 ff2d 	bl	8003b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cee:	f7ff fe63 	bl	80019b8 <main>
  bx  lr    
 8001cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d00:	08003be0 	.word	0x08003be0
  ldr r2, =_sbss
 8001d04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d08:	200000c4 	.word	0x200000c4

08001d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC_IRQHandler>
	...

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <HAL_Init+0x40>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_Init+0x40>)
 8001d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <HAL_Init+0x40>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 f931 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3e:	200f      	movs	r0, #15
 8001d40:	f000 f808 	bl	8001d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d44:	f7ff ff0e 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x54>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x58>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f93b 	bl	8001fee <HAL_SYSTICK_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00e      	b.n	8001da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d80a      	bhi.n	8001d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f000 f911 	bl	8001fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_InitTick+0x5c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000008 	.word	0x20000008
 8001db0:	20000004 	.word	0x20000004

08001db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x20>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc6:	6013      	str	r3, [r2, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	200000c0 	.word	0x200000c0

08001ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return uwTick;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_GetTick+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	200000c0 	.word	0x200000c0

08001df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dfc:	f7ff ffee 	bl	8001ddc <HAL_GetTick>
 8001e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d005      	beq.n	8001e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_Delay+0x44>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e1a:	bf00      	nop
 8001e1c:	f7ff ffde 	bl	8001ddc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d8f7      	bhi.n	8001e1c <HAL_Delay+0x28>
  {
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	; (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6c:	d301      	bcc.n	8001f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00f      	b.n	8001f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <SysTick_Config+0x40>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7ff ff8e 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SysTick_Config+0x40>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SysTick_Config+0x40>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff47 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff5c 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff8e 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5d 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffb0 	bl	8001f5c <SysTick_Config>
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	e16b      	b.n	80022fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	f040 815a 	bne.w	80022f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d005      	beq.n	800205a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	2b02      	cmp	r3, #2
 8002058:	d130      	bne.n	80020bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 0201 	and.w	r2, r3, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d017      	beq.n	80020f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d123      	bne.n	800214c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	08da      	lsrs	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3208      	adds	r2, #8
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	08da      	lsrs	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3208      	adds	r2, #8
 8002146:	69b9      	ldr	r1, [r7, #24]
 8002148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0203 	and.w	r2, r3, #3
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80b4 	beq.w	80022f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b60      	ldr	r3, [pc, #384]	; (8002314 <HAL_GPIO_Init+0x30c>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a5f      	ldr	r2, [pc, #380]	; (8002314 <HAL_GPIO_Init+0x30c>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_GPIO_Init+0x30c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021aa:	4a5b      	ldr	r2, [pc, #364]	; (8002318 <HAL_GPIO_Init+0x310>)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_GPIO_Init+0x314>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d02b      	beq.n	800222e <HAL_GPIO_Init+0x226>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a51      	ldr	r2, [pc, #324]	; (8002320 <HAL_GPIO_Init+0x318>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d025      	beq.n	800222a <HAL_GPIO_Init+0x222>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a50      	ldr	r2, [pc, #320]	; (8002324 <HAL_GPIO_Init+0x31c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01f      	beq.n	8002226 <HAL_GPIO_Init+0x21e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <HAL_GPIO_Init+0x320>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_GPIO_Init+0x21a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4e      	ldr	r2, [pc, #312]	; (800232c <HAL_GPIO_Init+0x324>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x216>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4d      	ldr	r2, [pc, #308]	; (8002330 <HAL_GPIO_Init+0x328>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x212>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <HAL_GPIO_Init+0x32c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x20e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4b      	ldr	r2, [pc, #300]	; (8002338 <HAL_GPIO_Init+0x330>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x20a>
 800220e:	2307      	movs	r3, #7
 8002210:	e00e      	b.n	8002230 <HAL_GPIO_Init+0x228>
 8002212:	2308      	movs	r3, #8
 8002214:	e00c      	b.n	8002230 <HAL_GPIO_Init+0x228>
 8002216:	2306      	movs	r3, #6
 8002218:	e00a      	b.n	8002230 <HAL_GPIO_Init+0x228>
 800221a:	2305      	movs	r3, #5
 800221c:	e008      	b.n	8002230 <HAL_GPIO_Init+0x228>
 800221e:	2304      	movs	r3, #4
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x228>
 8002222:	2303      	movs	r3, #3
 8002224:	e004      	b.n	8002230 <HAL_GPIO_Init+0x228>
 8002226:	2302      	movs	r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x228>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x228>
 800222e:	2300      	movs	r3, #0
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f002 0203 	and.w	r2, r2, #3
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	4093      	lsls	r3, r2
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002240:	4935      	ldr	r1, [pc, #212]	; (8002318 <HAL_GPIO_Init+0x310>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224e:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_GPIO_Init+0x334>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002272:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_GPIO_Init+0x334>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_GPIO_Init+0x334>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800229c:	4a27      	ldr	r2, [pc, #156]	; (800233c <HAL_GPIO_Init+0x334>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_GPIO_Init+0x334>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_GPIO_Init+0x334>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_GPIO_Init+0x334>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_GPIO_Init+0x334>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	f67f ae90 	bls.w	8002024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40013800 	.word	0x40013800
 800231c:	40020000 	.word	0x40020000
 8002320:	40020400 	.word	0x40020400
 8002324:	40020800 	.word	0x40020800
 8002328:	40020c00 	.word	0x40020c00
 800232c:	40021000 	.word	0x40021000
 8002330:	40021400 	.word	0x40021400
 8002334:	40021800 	.word	0x40021800
 8002338:	40021c00 	.word	0x40021c00
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e12b      	b.n	80025aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fc24 	bl	8001bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023a4:	f001 fbbc 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80023a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4a81      	ldr	r2, [pc, #516]	; (80025b4 <HAL_I2C_Init+0x274>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d807      	bhi.n	80023c4 <HAL_I2C_Init+0x84>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a80      	ldr	r2, [pc, #512]	; (80025b8 <HAL_I2C_Init+0x278>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	bf94      	ite	ls
 80023bc:	2301      	movls	r3, #1
 80023be:	2300      	movhi	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e006      	b.n	80023d2 <HAL_I2C_Init+0x92>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a7d      	ldr	r2, [pc, #500]	; (80025bc <HAL_I2C_Init+0x27c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	bf94      	ite	ls
 80023cc:	2301      	movls	r3, #1
 80023ce:	2300      	movhi	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0e7      	b.n	80025aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a78      	ldr	r2, [pc, #480]	; (80025c0 <HAL_I2C_Init+0x280>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0c9b      	lsrs	r3, r3, #18
 80023e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a6a      	ldr	r2, [pc, #424]	; (80025b4 <HAL_I2C_Init+0x274>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d802      	bhi.n	8002414 <HAL_I2C_Init+0xd4>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3301      	adds	r3, #1
 8002412:	e009      	b.n	8002428 <HAL_I2C_Init+0xe8>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	4a69      	ldr	r2, [pc, #420]	; (80025c4 <HAL_I2C_Init+0x284>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	3301      	adds	r3, #1
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	430b      	orrs	r3, r1
 800242e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800243a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	495c      	ldr	r1, [pc, #368]	; (80025b4 <HAL_I2C_Init+0x274>)
 8002444:	428b      	cmp	r3, r1
 8002446:	d819      	bhi.n	800247c <HAL_I2C_Init+0x13c>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1e59      	subs	r1, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fbb1 f3f3 	udiv	r3, r1, r3
 8002456:	1c59      	adds	r1, r3, #1
 8002458:	f640 73fc 	movw	r3, #4092	; 0xffc
 800245c:	400b      	ands	r3, r1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_I2C_Init+0x138>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1e59      	subs	r1, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002470:	3301      	adds	r3, #1
 8002472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002476:	e051      	b.n	800251c <HAL_I2C_Init+0x1dc>
 8002478:	2304      	movs	r3, #4
 800247a:	e04f      	b.n	800251c <HAL_I2C_Init+0x1dc>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d111      	bne.n	80024a8 <HAL_I2C_Init+0x168>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e58      	subs	r0, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	440b      	add	r3, r1
 8002492:	fbb0 f3f3 	udiv	r3, r0, r3
 8002496:	3301      	adds	r3, #1
 8002498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e012      	b.n	80024ce <HAL_I2C_Init+0x18e>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1e58      	subs	r0, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	0099      	lsls	r1, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Init+0x196>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e022      	b.n	800251c <HAL_I2C_Init+0x1dc>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10e      	bne.n	80024fc <HAL_I2C_Init+0x1bc>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1e58      	subs	r0, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	440b      	add	r3, r1
 80024ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024fa:	e00f      	b.n	800251c <HAL_I2C_Init+0x1dc>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e58      	subs	r0, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	0099      	lsls	r1, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	6809      	ldr	r1, [r1, #0]
 8002520:	4313      	orrs	r3, r2
 8002522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800254a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6911      	ldr	r1, [r2, #16]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68d2      	ldr	r2, [r2, #12]
 8002556:	4311      	orrs	r1, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	430b      	orrs	r3, r1
 800255e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	000186a0 	.word	0x000186a0
 80025b8:	001e847f 	.word	0x001e847f
 80025bc:	003d08ff 	.word	0x003d08ff
 80025c0:	431bde83 	.word	0x431bde83
 80025c4:	10624dd3 	.word	0x10624dd3

080025c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	817b      	strh	r3, [r7, #10]
 80025da:	460b      	mov	r3, r1
 80025dc:	813b      	strh	r3, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e2:	f7ff fbfb 	bl	8001ddc <HAL_GetTick>
 80025e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	f040 80d9 	bne.w	80027a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2319      	movs	r3, #25
 80025fc:	2201      	movs	r2, #1
 80025fe:	496d      	ldr	r1, [pc, #436]	; (80027b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fc7f 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
 800260e:	e0cc      	b.n	80027aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_I2C_Mem_Write+0x56>
 800261a:	2302      	movs	r3, #2
 800261c:	e0c5      	b.n	80027aa <HAL_I2C_Mem_Write+0x1e2>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d007      	beq.n	8002644 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002652:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2221      	movs	r2, #33	; 0x21
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a4d      	ldr	r2, [pc, #308]	; (80027b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002686:	88f8      	ldrh	r0, [r7, #6]
 8002688:	893a      	ldrh	r2, [r7, #8]
 800268a:	8979      	ldrh	r1, [r7, #10]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	4603      	mov	r3, r0
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fab6 	bl	8002c08 <I2C_RequestMemoryWrite>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d052      	beq.n	8002748 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e081      	b.n	80027aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fd00 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d107      	bne.n	80026ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e06b      	b.n	80027aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d11b      	bne.n	8002748 <HAL_I2C_Mem_Write+0x180>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	d017      	beq.n	8002748 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1aa      	bne.n	80026a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fcec 	bl	8003132 <I2C_WaitOnBTFFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00d      	beq.n	800277c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	2b04      	cmp	r3, #4
 8002766:	d107      	bne.n	8002778 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e016      	b.n	80027aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	00100002 	.word	0x00100002
 80027b8:	ffff0000 	.word	0xffff0000

080027bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08c      	sub	sp, #48	; 0x30
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	817b      	strh	r3, [r7, #10]
 80027ce:	460b      	mov	r3, r1
 80027d0:	813b      	strh	r3, [r7, #8]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027d6:	f7ff fb01 	bl	8001ddc <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	f040 8208 	bne.w	8002bfa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2319      	movs	r3, #25
 80027f0:	2201      	movs	r2, #1
 80027f2:	497b      	ldr	r1, [pc, #492]	; (80029e0 <HAL_I2C_Mem_Read+0x224>)
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fb85 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
 8002802:	e1fb      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_I2C_Mem_Read+0x56>
 800280e:	2302      	movs	r3, #2
 8002810:	e1f4      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d007      	beq.n	8002838 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2222      	movs	r2, #34	; 0x22
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002868:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a5b      	ldr	r2, [pc, #364]	; (80029e4 <HAL_I2C_Mem_Read+0x228>)
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800287a:	88f8      	ldrh	r0, [r7, #6]
 800287c:	893a      	ldrh	r2, [r7, #8]
 800287e:	8979      	ldrh	r1, [r7, #10]
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4603      	mov	r3, r0
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fa52 	bl	8002d34 <I2C_RequestMemoryRead>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e1b0      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d113      	bne.n	80028ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	623b      	str	r3, [r7, #32]
 80028b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e184      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d11b      	bne.n	800290a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e164      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	2b02      	cmp	r3, #2
 8002910:	d11b      	bne.n	800294a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002920:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002930:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	e144      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002960:	e138      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	2b03      	cmp	r3, #3
 8002968:	f200 80f1 	bhi.w	8002b4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	2b01      	cmp	r3, #1
 8002972:	d123      	bne.n	80029bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fc1b 	bl	80031b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e139      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ba:	e10b      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d14e      	bne.n	8002a62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	2200      	movs	r2, #0
 80029cc:	4906      	ldr	r1, [pc, #24]	; (80029e8 <HAL_I2C_Mem_Read+0x22c>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa98 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e10e      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
 80029de:	bf00      	nop
 80029e0:	00100002 	.word	0x00100002
 80029e4:	ffff0000 	.word	0xffff0000
 80029e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a60:	e0b8      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4966      	ldr	r1, [pc, #408]	; (8002c04 <HAL_I2C_Mem_Read+0x448>)
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fa49 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0bf      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	494f      	ldr	r1, [pc, #316]	; (8002c04 <HAL_I2C_Mem_Read+0x448>)
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fa1b 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e091      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b4c:	e042      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fb2e 	bl	80031b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e04c      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d118      	bne.n	8002bd4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f47f aec2 	bne.w	8002962 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
  }
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	00010004 	.word	0x00010004

08002c08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f960 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c58:	d103      	bne.n	8002c62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e05f      	b.n	8002d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	6a3a      	ldr	r2, [r7, #32]
 8002c7a:	492d      	ldr	r1, [pc, #180]	; (8002d30 <I2C_RequestMemoryWrite+0x128>)
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f998 	bl	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04c      	b.n	8002d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	6a39      	ldr	r1, [r7, #32]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa02 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d107      	bne.n	8002cca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e02b      	b.n	8002d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd4:	893b      	ldrh	r3, [r7, #8]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	611a      	str	r2, [r3, #16]
 8002cde:	e021      	b.n	8002d24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ce0:	893b      	ldrh	r3, [r7, #8]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	6a39      	ldr	r1, [r7, #32]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f9dc 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d107      	bne.n	8002d16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e005      	b.n	8002d26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1a:	893b      	ldrh	r3, [r7, #8]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	00010002 	.word	0x00010002

08002d34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	460b      	mov	r3, r1
 8002d48:	813b      	strh	r3, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f8c2 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d94:	d103      	bne.n	8002d9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e0aa      	b.n	8002ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	4952      	ldr	r1, [pc, #328]	; (8002f00 <I2C_RequestMemoryRead+0x1cc>)
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f8fa 	bl	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e097      	b.n	8002ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f964 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d107      	bne.n	8002e06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e076      	b.n	8002ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e10:	893b      	ldrh	r3, [r7, #8]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]
 8002e1a:	e021      	b.n	8002e60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e1c:	893b      	ldrh	r3, [r7, #8]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f93e 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d107      	bne.n	8002e52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e050      	b.n	8002ef8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e56:	893b      	ldrh	r3, [r7, #8]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	6a39      	ldr	r1, [r7, #32]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f923 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d107      	bne.n	8002e88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e035      	b.n	8002ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f82b 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec2:	d103      	bne.n	8002ecc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e013      	b.n	8002ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ed0:	897b      	ldrh	r3, [r7, #10]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	6a3a      	ldr	r2, [r7, #32]
 8002ee4:	4906      	ldr	r1, [pc, #24]	; (8002f00 <I2C_RequestMemoryRead+0x1cc>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f863 	bl	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	00010002 	.word	0x00010002

08002f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f14:	e025      	b.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d021      	beq.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe ff5d 	bl	8001ddc <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e023      	b.n	8002faa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10d      	bne.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	e00c      	b.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d0b6      	beq.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc0:	e051      	b.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd0:	d123      	bne.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0204 	orr.w	r2, r3, #4
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e046      	b.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d021      	beq.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fe fedb 	bl	8001ddc <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d116      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e020      	b.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10c      	bne.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	e00b      	b.n	80030a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	43da      	mvns	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d18d      	bne.n	8002fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030bc:	e02d      	b.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8ce 	bl	8003260 <I2C_IsAcknowledgeFailed>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e02d      	b.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d021      	beq.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7fe fe81 	bl	8001ddc <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d116      	bne.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e007      	b.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d1ca      	bne.n	80030be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800313e:	e02d      	b.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f88d 	bl	8003260 <I2C_IsAcknowledgeFailed>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e02d      	b.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d021      	beq.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003158:	f7fe fe40 	bl	8001ddc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	429a      	cmp	r2, r3
 8003166:	d302      	bcc.n	800316e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d116      	bne.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e007      	b.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d1ca      	bne.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031c0:	e042      	b.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d119      	bne.n	8003204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0210 	mvn.w	r2, #16
 80031d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e029      	b.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003204:	f7fe fdea 	bl	8001ddc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	429a      	cmp	r2, r3
 8003212:	d302      	bcc.n	800321a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e007      	b.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d1b5      	bne.n	80031c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d11b      	bne.n	80032b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003280:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e267      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d075      	beq.n	80033ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032de:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d00c      	beq.n	8003304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b85      	ldr	r3, [pc, #532]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d112      	bne.n	800331c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f6:	4b82      	ldr	r3, [pc, #520]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003302:	d10b      	bne.n	800331c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	4b7e      	ldr	r3, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d05b      	beq.n	80033c8 <HAL_RCC_OscConfig+0x108>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d157      	bne.n	80033c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e242      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d106      	bne.n	8003334 <HAL_RCC_OscConfig+0x74>
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0xb0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x98>
 800333e:	4b70      	ldr	r3, [pc, #448]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6f      	ldr	r2, [pc, #444]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b6d      	ldr	r3, [pc, #436]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6c      	ldr	r2, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0xb0>
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a68      	ldr	r2, [pc, #416]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe fd30 	bl	8001ddc <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe fd2c 	bl	8001ddc <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e207      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b5b      	ldr	r3, [pc, #364]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xc0>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fd1c 	bl	8001ddc <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fd18 	bl	8001ddc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1f3      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	4b51      	ldr	r3, [pc, #324]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0xe8>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d063      	beq.n	800349e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d6:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d11c      	bne.n	8003428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ee:	4b44      	ldr	r3, [pc, #272]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d116      	bne.n	8003428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x152>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e1c7      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4937      	ldr	r1, [pc, #220]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	e03a      	b.n	800349e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003430:	4b34      	ldr	r3, [pc, #208]	; (8003504 <HAL_RCC_OscConfig+0x244>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe fcd1 	bl	8001ddc <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343e:	f7fe fccd 	bl	8001ddc <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e1a8      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4925      	ldr	r1, [pc, #148]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x244>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe fcb0 	bl	8001ddc <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe fcac 	bl	8001ddc <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e187      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d036      	beq.n	8003518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_RCC_OscConfig+0x248>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe fc90 	bl	8001ddc <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fe fc8c 	bl	8001ddc <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e167      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x200>
 80034de:	e01b      	b.n	8003518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_OscConfig+0x248>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fc79 	bl	8001ddc <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	e00e      	b.n	800350c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fe fc75 	bl	8001ddc <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d907      	bls.n	800350c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e150      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
 8003500:	40023800 	.word	0x40023800
 8003504:	42470000 	.word	0x42470000
 8003508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ea      	bne.n	80034ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8097 	beq.w	8003654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b81      	ldr	r3, [pc, #516]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10f      	bne.n	8003556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	4b7d      	ldr	r3, [pc, #500]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a7c      	ldr	r2, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b77      	ldr	r3, [pc, #476]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d118      	bne.n	8003594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b74      	ldr	r3, [pc, #464]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a73      	ldr	r2, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fe fc35 	bl	8001ddc <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003576:	f7fe fc31 	bl	8001ddc <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e10c      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x2ea>
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	4a63      	ldr	r2, [pc, #396]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	e01c      	b.n	80035e4 <HAL_RCC_OscConfig+0x324>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x30c>
 80035b2:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a5e      	ldr	r2, [pc, #376]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
 80035be:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0x324>
 80035cc:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a57      	ldr	r2, [pc, #348]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	4b55      	ldr	r3, [pc, #340]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fe fbf6 	bl	8001ddc <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fe fbf2 	bl	8001ddc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e0cb      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360a:	4b49      	ldr	r3, [pc, #292]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ee      	beq.n	80035f4 <HAL_RCC_OscConfig+0x334>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003618:	f7fe fbe0 	bl	8001ddc <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fe fbdc 	bl	8001ddc <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e0b5      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ee      	bne.n	8003620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	4a38      	ldr	r2, [pc, #224]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80a1 	beq.w	80037a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d05c      	beq.n	8003724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d141      	bne.n	80036f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe fbb0 	bl	8001ddc <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe fbac 	bl	8001ddc <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e087      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	3b01      	subs	r3, #1
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	491b      	ldr	r1, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fe fb85 	bl	8001ddc <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe fb81 	bl	8001ddc <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e05c      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x416>
 80036f4:	e054      	b.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe fb6e 	bl	8001ddc <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fe fb6a 	bl	8001ddc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e045      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x444>
 8003722:	e03d      	b.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d107      	bne.n	800373c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e038      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
 8003730:	40023800 	.word	0x40023800
 8003734:	40007000 	.word	0x40007000
 8003738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800373c:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <HAL_RCC_OscConfig+0x4ec>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d028      	beq.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d121      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d11a      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003774:	4293      	cmp	r3, r2
 8003776:	d111      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	3b01      	subs	r3, #1
 8003786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0cc      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b68      	ldr	r3, [pc, #416]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d90c      	bls.n	80037ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b65      	ldr	r3, [pc, #404]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b63      	ldr	r3, [pc, #396]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0b8      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003804:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800381c:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a52      	ldr	r2, [pc, #328]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	494d      	ldr	r1, [pc, #308]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d044      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d119      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d003      	beq.n	800386e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386a:	2b03      	cmp	r3, #3
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	4b3f      	ldr	r3, [pc, #252]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e067      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4934      	ldr	r1, [pc, #208]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a0:	f7fe fa9c 	bl	8001ddc <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fe fa98 	bl	8001ddc <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e04f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b2b      	ldr	r3, [pc, #172]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 020c 	and.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1eb      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d20c      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e032      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4916      	ldr	r1, [pc, #88]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	490e      	ldr	r1, [pc, #56]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003936:	f000 f821 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	490a      	ldr	r1, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe f9fc 	bl	8001d54 <HAL_InitTick>

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023c00 	.word	0x40023c00
 800396c:	40023800 	.word	0x40023800
 8003970:	08003bb8 	.word	0x08003bb8
 8003974:	20000000 	.word	0x20000000
 8003978:	20000004 	.word	0x20000004

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b090      	sub	sp, #64	; 0x40
 8003982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
 8003988:	2300      	movs	r3, #0
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800398c:	2300      	movs	r3, #0
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003994:	4b59      	ldr	r3, [pc, #356]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d00d      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x40>
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	f200 80a1 	bhi.w	8003ae8 <HAL_RCC_GetSysClockFreq+0x16c>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x34>
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ae:	e09b      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x184>)
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039b4:	e09b      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b6:	4b53      	ldr	r3, [pc, #332]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039ba:	e098      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039bc:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c6:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	2200      	movs	r2, #0
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	627a      	str	r2, [r7, #36]	; 0x24
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039e4:	2100      	movs	r1, #0
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e8:	fb03 f201 	mul.w	r2, r3, r1
 80039ec:	2300      	movs	r3, #0
 80039ee:	fb00 f303 	mul.w	r3, r0, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	4a43      	ldr	r2, [pc, #268]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039f6:	fba0 1202 	umull	r1, r2, r0, r2
 80039fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fc:	460a      	mov	r2, r1
 80039fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a02:	4413      	add	r3, r2
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	2200      	movs	r2, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	61fa      	str	r2, [r7, #28]
 8003a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a16:	f7fd f845 	bl	8000aa4 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4613      	mov	r3, r2
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a22:	e053      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a24:	4b35      	ldr	r3, [pc, #212]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	617a      	str	r2, [r7, #20]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a36:	f04f 0b00 	mov.w	fp, #0
 8003a3a:	4652      	mov	r2, sl
 8003a3c:	465b      	mov	r3, fp
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	0159      	lsls	r1, r3, #5
 8003a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4c:	0150      	lsls	r0, r2, #5
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	ebb2 080a 	subs.w	r8, r2, sl
 8003a56:	eb63 090b 	sbc.w	r9, r3, fp
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a72:	eb63 0509 	sbc.w	r5, r3, r9
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	00eb      	lsls	r3, r5, #3
 8003a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a84:	00e2      	lsls	r2, r4, #3
 8003a86:	4614      	mov	r4, r2
 8003a88:	461d      	mov	r5, r3
 8003a8a:	eb14 030a 	adds.w	r3, r4, sl
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	eb45 030b 	adc.w	r3, r5, fp
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	028b      	lsls	r3, r1, #10
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aac:	4621      	mov	r1, r4
 8003aae:	028a      	lsls	r2, r1, #10
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	60fa      	str	r2, [r7, #12]
 8003abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac0:	f7fc fff0 	bl	8000aa4 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae6:	e002      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3740      	adds	r7, #64	; 0x40
 8003af4:	46bd      	mov	sp, r7
 8003af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	00f42400 	.word	0x00f42400
 8003b04:	017d7840 	.word	0x017d7840

08003b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000

08003b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b24:	f7ff fff0 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0a9b      	lsrs	r3, r3, #10
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4903      	ldr	r1, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	08003bc8 	.word	0x08003bc8

08003b48 <__libc_init_array>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	4d0d      	ldr	r5, [pc, #52]	; (8003b80 <__libc_init_array+0x38>)
 8003b4c:	4c0d      	ldr	r4, [pc, #52]	; (8003b84 <__libc_init_array+0x3c>)
 8003b4e:	1b64      	subs	r4, r4, r5
 8003b50:	10a4      	asrs	r4, r4, #2
 8003b52:	2600      	movs	r6, #0
 8003b54:	42a6      	cmp	r6, r4
 8003b56:	d109      	bne.n	8003b6c <__libc_init_array+0x24>
 8003b58:	4d0b      	ldr	r5, [pc, #44]	; (8003b88 <__libc_init_array+0x40>)
 8003b5a:	4c0c      	ldr	r4, [pc, #48]	; (8003b8c <__libc_init_array+0x44>)
 8003b5c:	f000 f820 	bl	8003ba0 <_init>
 8003b60:	1b64      	subs	r4, r4, r5
 8003b62:	10a4      	asrs	r4, r4, #2
 8003b64:	2600      	movs	r6, #0
 8003b66:	42a6      	cmp	r6, r4
 8003b68:	d105      	bne.n	8003b76 <__libc_init_array+0x2e>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b70:	4798      	blx	r3
 8003b72:	3601      	adds	r6, #1
 8003b74:	e7ee      	b.n	8003b54 <__libc_init_array+0xc>
 8003b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7a:	4798      	blx	r3
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	e7f2      	b.n	8003b66 <__libc_init_array+0x1e>
 8003b80:	08003bd8 	.word	0x08003bd8
 8003b84:	08003bd8 	.word	0x08003bd8
 8003b88:	08003bd8 	.word	0x08003bd8
 8003b8c:	08003bdc 	.word	0x08003bdc

08003b90 <memset>:
 8003b90:	4402      	add	r2, r0
 8003b92:	4603      	mov	r3, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <_init>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr

08003bac <_fini>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	bf00      	nop
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr
